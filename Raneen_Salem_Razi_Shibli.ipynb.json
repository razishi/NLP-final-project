{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "*  raneen salem - 324939610\n",
        "\n",
        "*   razi shibli - 324259555\n",
        "\n",
        "\n",
        "\\\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "L9aqMmIAhtxU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Preprocessing Text Data and Saving for Model Training\n",
        "This series of code steps involves loading and cleaning a dataset of text reviews, handling missing values and categorical data, transforming the text into meaningful numerical features using both CountVectorizer (BOW) and Flair embeddings (GloVe). It normalizes the embeddings, splits the data into training and testing sets, and ensures the text is ready for model input. Finally, the preprocessed data is saved into a CSV file for later use in model training.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "bDfb9SH6iAm-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data Upload\n",
        "\n",
        "*   This code uploads a CSV file, checks for missing values and duplicates, and displays the first few rows of the dataset for initial exploration.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "_Nbwxqc0gUV_"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 591
        },
        "id": "EVYlTq7jTMXo",
        "outputId": "da10d328-2f79-4aed-afa0-9cd8289ea629"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-8cda0563-48ea-4b3f-a30e-40c8c55e7031\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-8cda0563-48ea-4b3f-a30e-40c8c55e7031\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving webmd (1).csv to webmd (1).csv\n",
            "Age              0\n",
            "Condition        0\n",
            "Date             0\n",
            "Drug             0\n",
            "DrugId           0\n",
            "EaseofUse        0\n",
            "Effectiveness    0\n",
            "Reviews          1\n",
            "Satisfaction     0\n",
            "Sex              0\n",
            "Sides            0\n",
            "UsefulCount      0\n",
            "dtype: int64\n",
            "Number of duplicate rows: 46\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Age                                          Condition       Date  \\\n",
              "0  55-64                                Chronic Hepatitis C  1/20/2018   \n",
              "1  25-34                      Chronic Type of Schizophrenia  3/15/2018   \n",
              "2  35-44                                              Other  5/27/2014   \n",
              "3  25-34                      Chronic Type of Schizophrenia  9/26/2009   \n",
              "4  55-64  Chronic Infection of Genotype 1 Hepatitis C Virus  1/20/2018   \n",
              "\n",
              "                         Drug  DrugId  EaseofUse  Effectiveness  \\\n",
              "0                     harvoni  167109          4              5   \n",
              "1  haloperidol decanoate vial    6092          5              5   \n",
              "2  haloperidol decanoate vial    6092          3              1   \n",
              "3  haloperidol decanoate vial    6092          2              3   \n",
              "4                     harvoni  167109          5              5   \n",
              "\n",
              "                                             Reviews  Satisfaction     Sex  \\\n",
              "0  I would do it over again I choose 9 pm to take...             5    Male   \n",
              "1  I am on haloperidol for bipolar it helps me sl...             4    Male   \n",
              "2  I used to take haldol (its shortened name) bec...             1  Female   \n",
              "3  it cannot treat negative symptoms like loss of...             3    Male   \n",
              "4  I would do it over again I choose 9 pm to take...             5           \n",
              "\n",
              "                                               Sides  UsefulCount  \n",
              "0  Tiredness,  headache ,  nausea ,  diarrhea , o...            2  \n",
              "1  Dizziness ,  lightheadedness , drowsiness, dif...            1  \n",
              "2  Dizziness ,  lightheadedness , drowsiness, dif...            3  \n",
              "3  Dizziness ,  lightheadedness , drowsiness, dif...            2  \n",
              "4  Tiredness,  headache ,  nausea ,  diarrhea , o...            9  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2be7efe3-72fb-4cd8-9dc0-7046588c377d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Condition</th>\n",
              "      <th>Date</th>\n",
              "      <th>Drug</th>\n",
              "      <th>DrugId</th>\n",
              "      <th>EaseofUse</th>\n",
              "      <th>Effectiveness</th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Satisfaction</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Sides</th>\n",
              "      <th>UsefulCount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>55-64</td>\n",
              "      <td>Chronic Hepatitis C</td>\n",
              "      <td>1/20/2018</td>\n",
              "      <td>harvoni</td>\n",
              "      <td>167109</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>I would do it over again I choose 9 pm to take...</td>\n",
              "      <td>5</td>\n",
              "      <td>Male</td>\n",
              "      <td>Tiredness,  headache ,  nausea ,  diarrhea , o...</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>25-34</td>\n",
              "      <td>Chronic Type of Schizophrenia</td>\n",
              "      <td>3/15/2018</td>\n",
              "      <td>haloperidol decanoate vial</td>\n",
              "      <td>6092</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>I am on haloperidol for bipolar it helps me sl...</td>\n",
              "      <td>4</td>\n",
              "      <td>Male</td>\n",
              "      <td>Dizziness ,  lightheadedness , drowsiness, dif...</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>35-44</td>\n",
              "      <td>Other</td>\n",
              "      <td>5/27/2014</td>\n",
              "      <td>haloperidol decanoate vial</td>\n",
              "      <td>6092</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>I used to take haldol (its shortened name) bec...</td>\n",
              "      <td>1</td>\n",
              "      <td>Female</td>\n",
              "      <td>Dizziness ,  lightheadedness , drowsiness, dif...</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>25-34</td>\n",
              "      <td>Chronic Type of Schizophrenia</td>\n",
              "      <td>9/26/2009</td>\n",
              "      <td>haloperidol decanoate vial</td>\n",
              "      <td>6092</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>it cannot treat negative symptoms like loss of...</td>\n",
              "      <td>3</td>\n",
              "      <td>Male</td>\n",
              "      <td>Dizziness ,  lightheadedness , drowsiness, dif...</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>55-64</td>\n",
              "      <td>Chronic Infection of Genotype 1 Hepatitis C Virus</td>\n",
              "      <td>1/20/2018</td>\n",
              "      <td>harvoni</td>\n",
              "      <td>167109</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>I would do it over again I choose 9 pm to take...</td>\n",
              "      <td>5</td>\n",
              "      <td></td>\n",
              "      <td>Tiredness,  headache ,  nausea ,  diarrhea , o...</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2be7efe3-72fb-4cd8-9dc0-7046588c377d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2be7efe3-72fb-4cd8-9dc0-7046588c377d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2be7efe3-72fb-4cd8-9dc0-7046588c377d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9e279643-c7d9-4a68-85be-48b79ffeb45d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9e279643-c7d9-4a68-85be-48b79ffeb45d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9e279643-c7d9-4a68-85be-48b79ffeb45d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 4091,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"03-Jun\",\n          \"0-2\",\n          \"55-64\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Condition\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 188,\n        \"samples\": [\n          \"Psoriasis\",\n          \"Twin Reversal Arterial Perfusion Syndrome\",\n          \"Inflammation of Skin caused by an Allergy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 2158,\n        \"samples\": [\n          \"6/25/2012\",\n          \"9/26/2015\",\n          \"06/10/2011\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Drug\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 149,\n        \"samples\": [\n          \"intestinex\",\n          \"hair regrowth solution, non-\",\n          \"indigo carmine ampul\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DrugId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 64941,\n        \"min\": 37,\n        \"max\": 176826,\n        \"num_unique_values\": 141,\n        \"samples\": [\n          16175,\n          77909,\n          13983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EaseofUse\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Effectiveness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          4,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Reviews\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2939,\n        \"samples\": [\n          \"I am taking 600mg twice a day for about a year and am very happy with the results. I have severe spinal pain from disingrating disks. I need to take antiacids as well for the acid problem but it is worth it not to hurt so badly. \",\n          \"well lets put it this way! it cost me 400$ for 12 tiny single pkgs and there was absolutely no sign of shrinkage or disappearance of any kind. i myaswell have put jerkins lotion on and enjoyed it for 2$. word of advice get them frozen off first then burned off if cryopen is not available. i got screwed out of 400$ this stuff does not work dont waste your money trust me. you can take that advice to the bank. if you dont believe me go ahead and waste your money on it. i cannot believe the drug companys would create smthn so expensive that they know doesnt work i do not believe it was experimented on an actual human maybe under a microscope not attached to a human body where virus is stored.\",\n          \"was taken off of Spiriva ins would not cover it and replaced with Incruse I feel like Spiriva worked better for me.I have been taking it 3 months.  \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Satisfaction\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Male\",\n          \"Female\",\n          \" \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sides\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 84,\n        \"samples\": [\n          \"Dry/ bloody nose ,  dry mouth /throat, throat irritation, bad taste in  mouth ,  nausea ,  dizziness , or  constipation  may occur.\",\n          \"Tiredness,  headache ,  nausea ,  diarrhea , or difficulty sleeping may occur.\",\n          \"Redness, swelling or  itching  at the injection site may occur.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UsefulCount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 0,\n        \"max\": 85,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          49,\n          0,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "\n",
        "# Load the dataset\n",
        "from google.colab import files\n",
        "\n",
        "# Upload the file\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Read the uploaded CSV file\n",
        "file_name = list(uploaded.keys())[0]\n",
        "data = pd.read_csv(file_name)\n",
        "\n",
        "# Save the uploaded file locally (optional, for future use in the session)\n",
        "data.to_csv('uploaded_file.csv', index=False)\n",
        "\n",
        "# Check for missing values\n",
        "print(data.isnull().sum())\n",
        "\n",
        "# Check for duplicates\n",
        "print(f\"Number of duplicate rows: {data.duplicated().sum()}\")\n",
        "\n",
        "# Display the first few rows of the dataset\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Text Preprocessing for Review Data\n",
        "\n",
        "*   This code cleans the 'Reviews' column in the dataset by removing URLs, numbers, special characters, and stopwords. It also handles empty or NaN reviews and applies the cleaning function to create a new 'cleaned_text' column.\n",
        "\n"
      ],
      "metadata": {
        "id": "NZC_8RAwguUY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "\n",
        "# Ensure stopwords are downloaded\n",
        "nltk.download('stopwords')\n",
        "\n",
        "# Load the stopwords list once to avoid repetitive downloads\n",
        "stop_words = set(stopwords.words('english'))\n",
        "\n",
        "# Define a function to clean text\n",
        "def clean_text(text):\n",
        "    if not isinstance(text, str):  # Check if the input is a string\n",
        "        return ''  # Return an empty string for non-string values\n",
        "\n",
        "    # Remove URLs and numbers\n",
        "    text = re.sub(r'http\\S+', '', text)  # Remove URLs\n",
        "    text = re.sub(r'\\d+', '', text)  # Remove numbers\n",
        "    text = re.sub(r'[^\\w\\s]', '', text)  # Remove special characters\n",
        "    text = re.sub(r'\\s+', ' ', text)  # Remove extra whitespace\n",
        "    text = text.lower()  # Convert to lowercase\n",
        "\n",
        "    # Optional: Remove stopwords\n",
        "    text = ' '.join(word for word in text.split() if word not in stop_words)\n",
        "    return text\n",
        "\n",
        "# Drop rows where 'Reviews' is empty or NaN\n",
        "data = data.dropna(subset=['Reviews'])\n",
        "\n",
        "# Apply the cleaning function to the 'Reviews' column\n",
        "data['cleaned_text'] = data['Reviews'].apply(clean_text)\n",
        "\n",
        "# Display the cleaned dataset\n",
        "data.head()\n"
      ],
      "metadata": {
        "id": "M6_HfdSMgqPC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 414
        },
        "outputId": "2d3b87b9-144c-4a34-c617-785a23e77e9f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Age                                          Condition       Date  \\\n",
              "0  55-64                                Chronic Hepatitis C  1/20/2018   \n",
              "1  25-34                      Chronic Type of Schizophrenia  3/15/2018   \n",
              "2  35-44                                              Other  5/27/2014   \n",
              "3  25-34                      Chronic Type of Schizophrenia  9/26/2009   \n",
              "4  55-64  Chronic Infection of Genotype 1 Hepatitis C Virus  1/20/2018   \n",
              "\n",
              "                         Drug  DrugId  EaseofUse  Effectiveness  \\\n",
              "0                     harvoni  167109          4              5   \n",
              "1  haloperidol decanoate vial    6092          5              5   \n",
              "2  haloperidol decanoate vial    6092          3              1   \n",
              "3  haloperidol decanoate vial    6092          2              3   \n",
              "4                     harvoni  167109          5              5   \n",
              "\n",
              "                                             Reviews  Satisfaction     Sex  \\\n",
              "0  I would do it over again I choose 9 pm to take...             5    Male   \n",
              "1  I am on haloperidol for bipolar it helps me sl...             4    Male   \n",
              "2  I used to take haldol (its shortened name) bec...             1  Female   \n",
              "3  it cannot treat negative symptoms like loss of...             3    Male   \n",
              "4  I would do it over again I choose 9 pm to take...             5           \n",
              "\n",
              "                                               Sides  UsefulCount  \\\n",
              "0  Tiredness,  headache ,  nausea ,  diarrhea , o...            2   \n",
              "1  Dizziness ,  lightheadedness , drowsiness, dif...            1   \n",
              "2  Dizziness ,  lightheadedness , drowsiness, dif...            3   \n",
              "3  Dizziness ,  lightheadedness , drowsiness, dif...            2   \n",
              "4  Tiredness,  headache ,  nausea ,  diarrhea , o...            9   \n",
              "\n",
              "                                        cleaned_text  \n",
              "0  would choose pm take mine told hep c yrs old s...  \n",
              "1  haloperidol bipolar helps sleep prevents delus...  \n",
              "2  used take haldol shortened name tourettes synd...  \n",
              "3  cannot treat negative symptoms like loss motiv...  \n",
              "4  would choose pm take mine told hep c yrs old s...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-974d29e6-7e42-441f-a9aa-6ce19c7949e4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Condition</th>\n",
              "      <th>Date</th>\n",
              "      <th>Drug</th>\n",
              "      <th>DrugId</th>\n",
              "      <th>EaseofUse</th>\n",
              "      <th>Effectiveness</th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Satisfaction</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Sides</th>\n",
              "      <th>UsefulCount</th>\n",
              "      <th>cleaned_text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>55-64</td>\n",
              "      <td>Chronic Hepatitis C</td>\n",
              "      <td>1/20/2018</td>\n",
              "      <td>harvoni</td>\n",
              "      <td>167109</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>I would do it over again I choose 9 pm to take...</td>\n",
              "      <td>5</td>\n",
              "      <td>Male</td>\n",
              "      <td>Tiredness,  headache ,  nausea ,  diarrhea , o...</td>\n",
              "      <td>2</td>\n",
              "      <td>would choose pm take mine told hep c yrs old s...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>25-34</td>\n",
              "      <td>Chronic Type of Schizophrenia</td>\n",
              "      <td>3/15/2018</td>\n",
              "      <td>haloperidol decanoate vial</td>\n",
              "      <td>6092</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>I am on haloperidol for bipolar it helps me sl...</td>\n",
              "      <td>4</td>\n",
              "      <td>Male</td>\n",
              "      <td>Dizziness ,  lightheadedness , drowsiness, dif...</td>\n",
              "      <td>1</td>\n",
              "      <td>haloperidol bipolar helps sleep prevents delus...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>35-44</td>\n",
              "      <td>Other</td>\n",
              "      <td>5/27/2014</td>\n",
              "      <td>haloperidol decanoate vial</td>\n",
              "      <td>6092</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>I used to take haldol (its shortened name) bec...</td>\n",
              "      <td>1</td>\n",
              "      <td>Female</td>\n",
              "      <td>Dizziness ,  lightheadedness , drowsiness, dif...</td>\n",
              "      <td>3</td>\n",
              "      <td>used take haldol shortened name tourettes synd...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>25-34</td>\n",
              "      <td>Chronic Type of Schizophrenia</td>\n",
              "      <td>9/26/2009</td>\n",
              "      <td>haloperidol decanoate vial</td>\n",
              "      <td>6092</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>it cannot treat negative symptoms like loss of...</td>\n",
              "      <td>3</td>\n",
              "      <td>Male</td>\n",
              "      <td>Dizziness ,  lightheadedness , drowsiness, dif...</td>\n",
              "      <td>2</td>\n",
              "      <td>cannot treat negative symptoms like loss motiv...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>55-64</td>\n",
              "      <td>Chronic Infection of Genotype 1 Hepatitis C Virus</td>\n",
              "      <td>1/20/2018</td>\n",
              "      <td>harvoni</td>\n",
              "      <td>167109</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>I would do it over again I choose 9 pm to take...</td>\n",
              "      <td>5</td>\n",
              "      <td></td>\n",
              "      <td>Tiredness,  headache ,  nausea ,  diarrhea , o...</td>\n",
              "      <td>9</td>\n",
              "      <td>would choose pm take mine told hep c yrs old s...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-974d29e6-7e42-441f-a9aa-6ce19c7949e4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-974d29e6-7e42-441f-a9aa-6ce19c7949e4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-974d29e6-7e42-441f-a9aa-6ce19c7949e4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-11e52a36-25f1-4512-a5df-810694825a22\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-11e52a36-25f1-4512-a5df-810694825a22')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-11e52a36-25f1-4512-a5df-810694825a22 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 4090,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"03-Jun\",\n          \"0-2\",\n          \"55-64\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Condition\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 188,\n        \"samples\": [\n          \"Psoriasis\",\n          \"Twin Reversal Arterial Perfusion Syndrome\",\n          \"Inflammation of Skin caused by an Allergy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 2158,\n        \"samples\": [\n          \"6/25/2012\",\n          \"9/26/2015\",\n          \"06/10/2011\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Drug\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 149,\n        \"samples\": [\n          \"intestinex\",\n          \"hair regrowth solution, non-\",\n          \"indigo carmine ampul\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DrugId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 64945,\n        \"min\": 37,\n        \"max\": 176826,\n        \"num_unique_values\": 141,\n        \"samples\": [\n          16175,\n          77909,\n          13983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EaseofUse\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Effectiveness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          4,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Reviews\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2939,\n        \"samples\": [\n          \"I am taking 600mg twice a day for about a year and am very happy with the results. I have severe spinal pain from disingrating disks. I need to take antiacids as well for the acid problem but it is worth it not to hurt so badly. \",\n          \"well lets put it this way! it cost me 400$ for 12 tiny single pkgs and there was absolutely no sign of shrinkage or disappearance of any kind. i myaswell have put jerkins lotion on and enjoyed it for 2$. word of advice get them frozen off first then burned off if cryopen is not available. i got screwed out of 400$ this stuff does not work dont waste your money trust me. you can take that advice to the bank. if you dont believe me go ahead and waste your money on it. i cannot believe the drug companys would create smthn so expensive that they know doesnt work i do not believe it was experimented on an actual human maybe under a microscope not attached to a human body where virus is stored.\",\n          \"was taken off of Spiriva ins would not cover it and replaced with Incruse I feel like Spiriva worked better for me.I have been taking it 3 months.  \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Satisfaction\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Male\",\n          \"Female\",\n          \" \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sides\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 84,\n        \"samples\": [\n          \"Dry/ bloody nose ,  dry mouth /throat, throat irritation, bad taste in  mouth ,  nausea ,  dizziness , or  constipation  may occur.\",\n          \"Tiredness,  headache ,  nausea ,  diarrhea , or difficulty sleeping may occur.\",\n          \"Redness, swelling or  itching  at the injection site may occur.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UsefulCount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 0,\n        \"max\": 85,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          49,\n          0,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cleaned_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2928,\n        \"samples\": [\n          \"since taking medication blood pressure increased see listed side effects anyone else experienced something\",\n          \"using years works great side effects take much need mg time sometimes mg per night way drug intended daytime use reason intended sleep\",\n          \"taking mg twice day year happy results severe spinal pain disingrating disks need take antiacids well acid problem worth hurt badly\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Handling Missing and Categorical Data in 'Satisfaction' Column\n",
        "\n",
        "*  This code checks for missing values in the 'Satisfaction' column and fills them with the most frequent value if necessary. It also converts categorical satisfaction labels (e.g., 'Excellent', 'Good') into numeric values (1-5). The data type of the 'Satisfaction' column is checked and converted if needed.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "UwwlGbczgwSQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for missing values in the 'Satisfaction' column\n",
        "if data['Satisfaction'].isnull().sum() > 0:\n",
        "    print(\"Missing values found in 'Satisfaction' column. Handling them...\")\n",
        "    # Filling missing values with the mode (most frequent value)\n",
        "    data['Satisfaction'] = data['Satisfaction'].fillna(data['Satisfaction'].mode()[0])\n",
        "\n",
        "# Check unique values in the 'Satisfaction' column\n",
        "print(\"Unique values in 'Satisfaction' column:\", data['Satisfaction'].unique())\n",
        "\n",
        "# Check the data type of the satisfaction column\n",
        "print(\"Data type of 'Satisfaction':\", data['Satisfaction'].dtype)\n",
        "\n",
        "# If the column contains non-numeric values, convert them to numeric\n",
        "if data['Satisfaction'].dtype == 'object':\n",
        "    # Optional: Check the unique values before conversion to ensure correct mapping\n",
        "    print(\"Converting categorical satisfaction values to numeric...\")\n",
        "\n",
        "else:\n",
        "    print(\"The 'Satisfaction' column is already numeric.\")\n",
        "\n",
        "# Display the first few rows to confirm\n",
        "data.head()\n"
      ],
      "metadata": {
        "id": "6gLKAOmagz53",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 432
        },
        "outputId": "80a24ceb-ddd5-4c8b-9ac1-7f7bbd96bf2e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Unique values in 'Satisfaction' column: [5 4 1 3 2]\n",
            "Data type of 'Satisfaction': int64\n",
            "The 'Satisfaction' column is already numeric.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Age                                          Condition       Date  \\\n",
              "0  55-64                                Chronic Hepatitis C  1/20/2018   \n",
              "1  25-34                      Chronic Type of Schizophrenia  3/15/2018   \n",
              "2  35-44                                              Other  5/27/2014   \n",
              "3  25-34                      Chronic Type of Schizophrenia  9/26/2009   \n",
              "4  55-64  Chronic Infection of Genotype 1 Hepatitis C Virus  1/20/2018   \n",
              "\n",
              "                         Drug  DrugId  EaseofUse  Effectiveness  \\\n",
              "0                     harvoni  167109          4              5   \n",
              "1  haloperidol decanoate vial    6092          5              5   \n",
              "2  haloperidol decanoate vial    6092          3              1   \n",
              "3  haloperidol decanoate vial    6092          2              3   \n",
              "4                     harvoni  167109          5              5   \n",
              "\n",
              "                                             Reviews  Satisfaction     Sex  \\\n",
              "0  I would do it over again I choose 9 pm to take...             5    Male   \n",
              "1  I am on haloperidol for bipolar it helps me sl...             4    Male   \n",
              "2  I used to take haldol (its shortened name) bec...             1  Female   \n",
              "3  it cannot treat negative symptoms like loss of...             3    Male   \n",
              "4  I would do it over again I choose 9 pm to take...             5           \n",
              "\n",
              "                                               Sides  UsefulCount  \\\n",
              "0  Tiredness,  headache ,  nausea ,  diarrhea , o...            2   \n",
              "1  Dizziness ,  lightheadedness , drowsiness, dif...            1   \n",
              "2  Dizziness ,  lightheadedness , drowsiness, dif...            3   \n",
              "3  Dizziness ,  lightheadedness , drowsiness, dif...            2   \n",
              "4  Tiredness,  headache ,  nausea ,  diarrhea , o...            9   \n",
              "\n",
              "                                        cleaned_text  \n",
              "0  would choose pm take mine told hep c yrs old s...  \n",
              "1  haloperidol bipolar helps sleep prevents delus...  \n",
              "2  used take haldol shortened name tourettes synd...  \n",
              "3  cannot treat negative symptoms like loss motiv...  \n",
              "4  would choose pm take mine told hep c yrs old s...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-92991b24-1456-48bf-b972-2af8a5b8558e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Condition</th>\n",
              "      <th>Date</th>\n",
              "      <th>Drug</th>\n",
              "      <th>DrugId</th>\n",
              "      <th>EaseofUse</th>\n",
              "      <th>Effectiveness</th>\n",
              "      <th>Reviews</th>\n",
              "      <th>Satisfaction</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Sides</th>\n",
              "      <th>UsefulCount</th>\n",
              "      <th>cleaned_text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>55-64</td>\n",
              "      <td>Chronic Hepatitis C</td>\n",
              "      <td>1/20/2018</td>\n",
              "      <td>harvoni</td>\n",
              "      <td>167109</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>I would do it over again I choose 9 pm to take...</td>\n",
              "      <td>5</td>\n",
              "      <td>Male</td>\n",
              "      <td>Tiredness,  headache ,  nausea ,  diarrhea , o...</td>\n",
              "      <td>2</td>\n",
              "      <td>would choose pm take mine told hep c yrs old s...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>25-34</td>\n",
              "      <td>Chronic Type of Schizophrenia</td>\n",
              "      <td>3/15/2018</td>\n",
              "      <td>haloperidol decanoate vial</td>\n",
              "      <td>6092</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>I am on haloperidol for bipolar it helps me sl...</td>\n",
              "      <td>4</td>\n",
              "      <td>Male</td>\n",
              "      <td>Dizziness ,  lightheadedness , drowsiness, dif...</td>\n",
              "      <td>1</td>\n",
              "      <td>haloperidol bipolar helps sleep prevents delus...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>35-44</td>\n",
              "      <td>Other</td>\n",
              "      <td>5/27/2014</td>\n",
              "      <td>haloperidol decanoate vial</td>\n",
              "      <td>6092</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>I used to take haldol (its shortened name) bec...</td>\n",
              "      <td>1</td>\n",
              "      <td>Female</td>\n",
              "      <td>Dizziness ,  lightheadedness , drowsiness, dif...</td>\n",
              "      <td>3</td>\n",
              "      <td>used take haldol shortened name tourettes synd...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>25-34</td>\n",
              "      <td>Chronic Type of Schizophrenia</td>\n",
              "      <td>9/26/2009</td>\n",
              "      <td>haloperidol decanoate vial</td>\n",
              "      <td>6092</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>it cannot treat negative symptoms like loss of...</td>\n",
              "      <td>3</td>\n",
              "      <td>Male</td>\n",
              "      <td>Dizziness ,  lightheadedness , drowsiness, dif...</td>\n",
              "      <td>2</td>\n",
              "      <td>cannot treat negative symptoms like loss motiv...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>55-64</td>\n",
              "      <td>Chronic Infection of Genotype 1 Hepatitis C Virus</td>\n",
              "      <td>1/20/2018</td>\n",
              "      <td>harvoni</td>\n",
              "      <td>167109</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>I would do it over again I choose 9 pm to take...</td>\n",
              "      <td>5</td>\n",
              "      <td></td>\n",
              "      <td>Tiredness,  headache ,  nausea ,  diarrhea , o...</td>\n",
              "      <td>9</td>\n",
              "      <td>would choose pm take mine told hep c yrs old s...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-92991b24-1456-48bf-b972-2af8a5b8558e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-92991b24-1456-48bf-b972-2af8a5b8558e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-92991b24-1456-48bf-b972-2af8a5b8558e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-35cddd1c-8b6a-4312-b864-65022198780b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-35cddd1c-8b6a-4312-b864-65022198780b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-35cddd1c-8b6a-4312-b864-65022198780b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 4090,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"03-Jun\",\n          \"0-2\",\n          \"55-64\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Condition\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 188,\n        \"samples\": [\n          \"Psoriasis\",\n          \"Twin Reversal Arterial Perfusion Syndrome\",\n          \"Inflammation of Skin caused by an Allergy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 2158,\n        \"samples\": [\n          \"6/25/2012\",\n          \"9/26/2015\",\n          \"06/10/2011\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Drug\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 149,\n        \"samples\": [\n          \"intestinex\",\n          \"hair regrowth solution, non-\",\n          \"indigo carmine ampul\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DrugId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 64945,\n        \"min\": 37,\n        \"max\": 176826,\n        \"num_unique_values\": 141,\n        \"samples\": [\n          16175,\n          77909,\n          13983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"EaseofUse\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Effectiveness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          4,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Reviews\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2939,\n        \"samples\": [\n          \"I am taking 600mg twice a day for about a year and am very happy with the results. I have severe spinal pain from disingrating disks. I need to take antiacids as well for the acid problem but it is worth it not to hurt so badly. \",\n          \"well lets put it this way! it cost me 400$ for 12 tiny single pkgs and there was absolutely no sign of shrinkage or disappearance of any kind. i myaswell have put jerkins lotion on and enjoyed it for 2$. word of advice get them frozen off first then burned off if cryopen is not available. i got screwed out of 400$ this stuff does not work dont waste your money trust me. you can take that advice to the bank. if you dont believe me go ahead and waste your money on it. i cannot believe the drug companys would create smthn so expensive that they know doesnt work i do not believe it was experimented on an actual human maybe under a microscope not attached to a human body where virus is stored.\",\n          \"was taken off of Spiriva ins would not cover it and replaced with Incruse I feel like Spiriva worked better for me.I have been taking it 3 months.  \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Satisfaction\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Male\",\n          \"Female\",\n          \" \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sides\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 84,\n        \"samples\": [\n          \"Dry/ bloody nose ,  dry mouth /throat, throat irritation, bad taste in  mouth ,  nausea ,  dizziness , or  constipation  may occur.\",\n          \"Tiredness,  headache ,  nausea ,  diarrhea , or difficulty sleeping may occur.\",\n          \"Redness, swelling or  itching  at the injection site may occur.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"UsefulCount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 0,\n        \"max\": 85,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          49,\n          0,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cleaned_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2928,\n        \"samples\": [\n          \"since taking medication blood pressure increased see listed side effects anyone else experienced something\",\n          \"using years works great side effects take much need mg time sometimes mg per night way drug intended daytime use reason intended sleep\",\n          \"taking mg twice day year happy results severe spinal pain disingrating disks need take antiacids well acid problem worth hurt badly\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Stratified Split for Training and Testing Data\n",
        "\n",
        "*  This code performs a stratified split of the dataset, ensuring that the distribution of satisfaction levels (the target variable) is consistent between the training and testing sets. The train and test sets are split with 80% of the data used for training and 20% for testing. It also displays the class distribution for both the training and testing sets to verify the stratification.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "6Yw_6NpLg5TF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Perform a stratified split to ensure consistent distribution of satisfaction levels in both train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    data['cleaned_text'], data['Satisfaction'], test_size=0.2, random_state=42, stratify=data['Satisfaction'])\n",
        "\n",
        "# Print the size of the train and test sets\n",
        "print(f\"Train size: {len(X_train)}, Test size: {len(X_test)}\")\n",
        "\n",
        "# Check class distribution in training and testing sets\n",
        "print(\"Training class distribution:\")\n",
        "print(y_train.value_counts())\n",
        "print(\"\\nTesting class distribution:\")\n",
        "print(y_test.value_counts())\n"
      ],
      "metadata": {
        "id": "al2Wt1LTg1P2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6ae83e68-fbf6-429e-d692-dc7a17843aed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size: 3272, Test size: 818\n",
            "Training class distribution:\n",
            "Satisfaction\n",
            "5    1197\n",
            "1     830\n",
            "4     565\n",
            "3     414\n",
            "2     266\n",
            "Name: count, dtype: int64\n",
            "\n",
            "Testing class distribution:\n",
            "Satisfaction\n",
            "5    299\n",
            "1    208\n",
            "4    141\n",
            "3    104\n",
            "2     66\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Text Vectorization using Bag-of-Words (BOW) with N-Grams\n",
        "\n",
        "\n",
        "*  This code uses the CountVectorizer from sklearn to convert the cleaned text data into a Bag-of-Words (BOW) representation with additional features such as bigrams (1-2 n-grams) and a maximum of 5000 features. The training data is fitted and transformed, while the test data is transformed. It also prints the shape of the resulting BOW features and the first few features (vocabulary). Optionally, the sparse matrix is converted into a dense matrix for further use.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "yQqW_Ko6g7GR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "\n",
        "# Initialize a CountVectorizer with additional parameters\n",
        "vectorizer_bow = CountVectorizer(ngram_range=(1, 2), max_features=5000, stop_words='english')\n",
        "\n",
        "# Fit and transform the training data, and transform the test data\n",
        "X_train_bow = vectorizer_bow.fit_transform(X_train)\n",
        "X_test_bow = vectorizer_bow.transform(X_test)\n",
        "\n",
        "# Print the shape of the BOW features\n",
        "print(f\"BOW feature shape: {X_train_bow.shape}\")\n",
        "\n",
        "# Print the first few features (vocabulary) to understand what words are included\n",
        "print(\"First few features in BOW:\", vectorizer_bow.get_feature_names_out()[:10])\n",
        "\n",
        "# (Optional) Convert the sparse matrix to dense if needed\n",
        "X_train_bow_dense = X_train_bow.toarray()\n",
        "print(\"Dense matrix shape:\", X_train_bow_dense.shape)\n"
      ],
      "metadata": {
        "id": "h98G19kjg9Yv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3211c5b0-5140-44c3-842e-9988fee57c88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BOW feature shape: (3272, 5000)\n",
            "First few features in BOW: ['abate' 'abate hours' 'abdomen' 'abdominal' 'abdominal cramping'\n",
            " 'abdominal pain' 'abilify' 'ability' 'able' 'able fall']\n",
            "Dense matrix shape: (3272, 5000)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Flair\n",
        "\n"
      ],
      "metadata": {
        "id": "G3a9HVZHg-HO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install flair\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "59c5D4uqaBMM",
        "outputId": "71f6489c-5286-4af2-e732-ff954a951dab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting flair\n",
            "  Downloading flair-0.15.0-py3-none-any.whl.metadata (12 kB)\n",
            "Collecting boto3>=1.20.27 (from flair)\n",
            "  Downloading boto3-1.36.6-py3-none-any.whl.metadata (6.6 kB)\n",
            "Collecting conllu<5.0.0,>=4.0 (from flair)\n",
            "  Downloading conllu-4.5.3-py2.py3-none-any.whl.metadata (19 kB)\n",
            "Requirement already satisfied: deprecated>=1.2.13 in /usr/local/lib/python3.11/dist-packages (from flair) (1.2.15)\n",
            "Collecting ftfy>=6.1.0 (from flair)\n",
            "  Downloading ftfy-6.3.1-py3-none-any.whl.metadata (7.3 kB)\n",
            "Requirement already satisfied: gdown>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from flair) (5.2.0)\n",
            "Requirement already satisfied: huggingface-hub>=0.10.0 in /usr/local/lib/python3.11/dist-packages (from flair) (0.27.1)\n",
            "Collecting langdetect>=1.0.9 (from flair)\n",
            "  Downloading langdetect-1.0.9.tar.gz (981 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m981.5/981.5 kB\u001b[0m \u001b[31m57.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: lxml>=4.8.0 in /usr/local/lib/python3.11/dist-packages (from flair) (5.3.0)\n",
            "Requirement already satisfied: matplotlib>=2.2.3 in /usr/local/lib/python3.11/dist-packages (from flair) (3.10.0)\n",
            "Requirement already satisfied: more-itertools>=8.13.0 in /usr/local/lib/python3.11/dist-packages (from flair) (10.5.0)\n",
            "Collecting mpld3>=0.3 (from flair)\n",
            "  Downloading mpld3-0.5.10-py3-none-any.whl.metadata (5.1 kB)\n",
            "Collecting pptree>=3.1 (from flair)\n",
            "  Downloading pptree-3.1.tar.gz (3.0 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from flair) (2.8.2)\n",
            "Collecting pytorch-revgrad>=0.2.0 (from flair)\n",
            "  Downloading pytorch_revgrad-0.2.0-py3-none-any.whl.metadata (1.7 kB)\n",
            "Requirement already satisfied: regex>=2022.1.18 in /usr/local/lib/python3.11/dist-packages (from flair) (2024.11.6)\n",
            "Requirement already satisfied: scikit-learn>=1.0.2 in /usr/local/lib/python3.11/dist-packages (from flair) (1.6.1)\n",
            "Collecting segtok>=1.5.11 (from flair)\n",
            "  Downloading segtok-1.5.11-py3-none-any.whl.metadata (9.0 kB)\n",
            "Collecting sqlitedict>=2.0.0 (from flair)\n",
            "  Downloading sqlitedict-2.1.0.tar.gz (21 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: tabulate>=0.8.10 in /usr/local/lib/python3.11/dist-packages (from flair) (0.9.0)\n",
            "Requirement already satisfied: torch!=1.8,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from flair) (2.5.1+cu121)\n",
            "Requirement already satisfied: tqdm>=4.63.0 in /usr/local/lib/python3.11/dist-packages (from flair) (4.67.1)\n",
            "Collecting transformer-smaller-training-vocab>=0.2.3 (from flair)\n",
            "  Downloading transformer_smaller_training_vocab-0.4.0-py3-none-any.whl.metadata (8.1 kB)\n",
            "Requirement already satisfied: transformers<5.0.0,>=4.25.0 in /usr/local/lib/python3.11/dist-packages (from transformers[sentencepiece]<5.0.0,>=4.25.0->flair) (4.47.1)\n",
            "Collecting wikipedia-api>=0.5.7 (from flair)\n",
            "  Downloading wikipedia_api-0.8.1.tar.gz (19 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting bioc<3.0.0,>=2.0.0 (from flair)\n",
            "  Downloading bioc-2.1-py3-none-any.whl.metadata (4.6 kB)\n",
            "Collecting jsonlines>=1.2.0 (from bioc<3.0.0,>=2.0.0->flair)\n",
            "  Downloading jsonlines-4.0.0-py3-none-any.whl.metadata (1.6 kB)\n",
            "Collecting intervaltree (from bioc<3.0.0,>=2.0.0->flair)\n",
            "  Downloading intervaltree-3.1.0.tar.gz (32 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting docopt (from bioc<3.0.0,>=2.0.0->flair)\n",
            "  Downloading docopt-0.6.2.tar.gz (25 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting botocore<1.37.0,>=1.36.6 (from boto3>=1.20.27->flair)\n",
            "  Downloading botocore-1.36.6-py3-none-any.whl.metadata (5.7 kB)\n",
            "Collecting jmespath<2.0.0,>=0.7.1 (from boto3>=1.20.27->flair)\n",
            "  Downloading jmespath-1.0.1-py3-none-any.whl.metadata (7.6 kB)\n",
            "Collecting s3transfer<0.12.0,>=0.11.0 (from boto3>=1.20.27->flair)\n",
            "  Downloading s3transfer-0.11.2-py3-none-any.whl.metadata (1.7 kB)\n",
            "Requirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.11/dist-packages (from deprecated>=1.2.13->flair) (1.17.2)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.11/dist-packages (from ftfy>=6.1.0->flair) (0.2.13)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.11/dist-packages (from gdown>=4.4.0->flair) (4.12.3)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from gdown>=4.4.0->flair) (3.17.0)\n",
            "Requirement already satisfied: requests[socks] in /usr/local/lib/python3.11/dist-packages (from gdown>=4.4.0->flair) (2.32.3)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.10.0->flair) (2024.10.0)\n",
            "Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.10.0->flair) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.10.0->flair) (6.0.2)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.10.0->flair) (4.12.2)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.11/dist-packages (from langdetect>=1.0.9->flair) (1.17.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=2.2.3->flair) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=2.2.3->flair) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=2.2.3->flair) (4.55.5)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=2.2.3->flair) (1.4.8)\n",
            "Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=2.2.3->flair) (1.26.4)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=2.2.3->flair) (11.1.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib>=2.2.3->flair) (3.2.1)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from mpld3>=0.3->flair) (3.1.5)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.0.2->flair) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.0.2->flair) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.0.2->flair) (3.5.0)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch!=1.8,>=1.5.0->flair) (3.4.2)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /usr/local/lib/python3.11/dist-packages (from torch!=1.8,>=1.5.0->flair) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /usr/local/lib/python3.11/dist-packages (from torch!=1.8,>=1.5.0->flair) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /usr/local/lib/python3.11/dist-packages (from torch!=1.8,>=1.5.0->flair) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch!=1.8,>=1.5.0->flair) (9.1.0.70)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /usr/local/lib/python3.11/dist-packages (from torch!=1.8,>=1.5.0->flair) (12.1.3.1)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /usr/local/lib/python3.11/dist-packages (from torch!=1.8,>=1.5.0->flair) (11.0.2.54)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /usr/local/lib/python3.11/dist-packages (from torch!=1.8,>=1.5.0->flair) (10.3.2.106)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /usr/local/lib/python3.11/dist-packages (from torch!=1.8,>=1.5.0->flair) (11.4.5.107)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /usr/local/lib/python3.11/dist-packages (from torch!=1.8,>=1.5.0->flair) (12.1.0.106)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch!=1.8,>=1.5.0->flair) (2.21.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /usr/local/lib/python3.11/dist-packages (from torch!=1.8,>=1.5.0->flair) (12.1.105)\n",
            "Requirement already satisfied: triton==3.1.0 in /usr/local/lib/python3.11/dist-packages (from torch!=1.8,>=1.5.0->flair) (3.1.0)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch!=1.8,>=1.5.0->flair) (1.13.1)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.11/dist-packages (from nvidia-cusolver-cu12==11.4.5.107->torch!=1.8,>=1.5.0->flair) (12.6.85)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch!=1.8,>=1.5.0->flair) (1.3.0)\n",
            "Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.25.0->transformers[sentencepiece]<5.0.0,>=4.25.0->flair) (0.21.0)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.25.0->transformers[sentencepiece]<5.0.0,>=4.25.0->flair) (0.5.2)\n",
            "Requirement already satisfied: sentencepiece!=0.1.92,>=0.1.91 in /usr/local/lib/python3.11/dist-packages (from transformers[sentencepiece]<5.0.0,>=4.25.0->flair) (0.2.0)\n",
            "Requirement already satisfied: protobuf in /usr/local/lib/python3.11/dist-packages (from transformers[sentencepiece]<5.0.0,>=4.25.0->flair) (4.25.5)\n",
            "Requirement already satisfied: urllib3!=2.2.0,<3,>=1.25.4 in /usr/local/lib/python3.11/dist-packages (from botocore<1.37.0,>=1.36.6->boto3>=1.20.27->flair) (2.3.0)\n",
            "Requirement already satisfied: attrs>=19.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonlines>=1.2.0->bioc<3.0.0,>=2.0.0->flair) (24.3.0)\n",
            "Requirement already satisfied: accelerate>=0.26.0 in /usr/local/lib/python3.11/dist-packages (from transformers[sentencepiece,torch]<5.0,>=4.1->transformer-smaller-training-vocab>=0.2.3->flair) (1.2.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->gdown>=4.4.0->flair) (2.6)\n",
            "Collecting sortedcontainers<3.0,>=2.0 (from intervaltree->bioc<3.0.0,>=2.0.0->flair)\n",
            "  Downloading sortedcontainers-2.4.0-py2.py3-none-any.whl.metadata (10 kB)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->mpld3>=0.3->flair) (3.0.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown>=4.4.0->flair) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown>=4.4.0->flair) (3.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown>=4.4.0->flair) (2024.12.14)\n",
            "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown>=4.4.0->flair) (1.7.1)\n",
            "Requirement already satisfied: psutil in /usr/local/lib/python3.11/dist-packages (from accelerate>=0.26.0->transformers[sentencepiece,torch]<5.0,>=4.1->transformer-smaller-training-vocab>=0.2.3->flair) (5.9.5)\n",
            "Downloading flair-0.15.0-py3-none-any.whl (1.2 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.2/1.2 MB\u001b[0m \u001b[31m67.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading bioc-2.1-py3-none-any.whl (33 kB)\n",
            "Downloading boto3-1.36.6-py3-none-any.whl (139 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m139.2/139.2 kB\u001b[0m \u001b[31m17.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading conllu-4.5.3-py2.py3-none-any.whl (16 kB)\n",
            "Downloading ftfy-6.3.1-py3-none-any.whl (44 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.8/44.8 kB\u001b[0m \u001b[31m5.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading mpld3-0.5.10-py3-none-any.whl (202 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m202.6/202.6 kB\u001b[0m \u001b[31m22.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pytorch_revgrad-0.2.0-py3-none-any.whl (4.6 kB)\n",
            "Downloading segtok-1.5.11-py3-none-any.whl (24 kB)\n",
            "Downloading transformer_smaller_training_vocab-0.4.0-py3-none-any.whl (14 kB)\n",
            "Downloading botocore-1.36.6-py3-none-any.whl (13.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.3/13.3 MB\u001b[0m \u001b[31m107.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading jmespath-1.0.1-py3-none-any.whl (20 kB)\n",
            "Downloading jsonlines-4.0.0-py3-none-any.whl (8.7 kB)\n",
            "Downloading s3transfer-0.11.2-py3-none-any.whl (84 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.2/84.2 kB\u001b[0m \u001b[31m10.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading sortedcontainers-2.4.0-py2.py3-none-any.whl (29 kB)\n",
            "Building wheels for collected packages: langdetect, pptree, sqlitedict, wikipedia-api, docopt, intervaltree\n",
            "  Building wheel for langdetect (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for langdetect: filename=langdetect-1.0.9-py3-none-any.whl size=993222 sha256=95f25350c9cbab0673da8685b8350743801a368fdd3ffecb7621b25317628b44\n",
            "  Stored in directory: /root/.cache/pip/wheels/0a/f2/b2/e5ca405801e05eb7c8ed5b3b4bcf1fcabcd6272c167640072e\n",
            "  Building wheel for pptree (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pptree: filename=pptree-3.1-py3-none-any.whl size=4608 sha256=400998a8c640474f0aadee3825dba439bf59f6efaac1d08e28dacac6a19295ef\n",
            "  Stored in directory: /root/.cache/pip/wheels/68/8a/eb/d683aa6d09dc68ebfde2f37566ddc8807837c4415b4fd2b04c\n",
            "  Building wheel for sqlitedict (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for sqlitedict: filename=sqlitedict-2.1.0-py3-none-any.whl size=16864 sha256=fb98f227711ea0ebee11d4424d6d9fa78d6a88a9a339b580dd9c21343fc037cf\n",
            "  Stored in directory: /root/.cache/pip/wheels/73/63/89/7210274f9b7fb033b8f22671f64c0e0b55083d30c3c046a3ff\n",
            "  Building wheel for wikipedia-api (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for wikipedia-api: filename=Wikipedia_API-0.8.1-py3-none-any.whl size=15384 sha256=e004f61fcedb35b727bc687f50468973c264e3441f53e58cf6271d3d96a8e999\n",
            "  Stored in directory: /root/.cache/pip/wheels/0b/0f/39/e8214ec038ccd5aeb8c82b957289f2f3ab2251febeae5c2860\n",
            "  Building wheel for docopt (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for docopt: filename=docopt-0.6.2-py2.py3-none-any.whl size=13706 sha256=e8d40e6fbf79cec691f166777619652c016879458b9c6ed67089764bb100486e\n",
            "  Stored in directory: /root/.cache/pip/wheels/1a/b0/8c/4b75c4116c31f83c8f9f047231251e13cc74481cca4a78a9ce\n",
            "  Building wheel for intervaltree (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for intervaltree: filename=intervaltree-3.1.0-py2.py3-none-any.whl size=26097 sha256=bbe6793d694265c92afabbcdb726b3e726288d57b44191dc1a94798d4f51fc65\n",
            "  Stored in directory: /root/.cache/pip/wheels/31/d7/d9/eec6891f78cac19a693bd40ecb8365d2f4613318c145ec9816\n",
            "Successfully built langdetect pptree sqlitedict wikipedia-api docopt intervaltree\n",
            "Installing collected packages: sqlitedict, sortedcontainers, pptree, docopt, segtok, langdetect, jsonlines, jmespath, intervaltree, ftfy, conllu, wikipedia-api, botocore, bioc, s3transfer, mpld3, pytorch-revgrad, boto3, transformer-smaller-training-vocab, flair\n",
            "Successfully installed bioc-2.1 boto3-1.36.6 botocore-1.36.6 conllu-4.5.3 docopt-0.6.2 flair-0.15.0 ftfy-6.3.1 intervaltree-3.1.0 jmespath-1.0.1 jsonlines-4.0.0 langdetect-1.0.9 mpld3-0.5.10 pptree-3.1 pytorch-revgrad-0.2.0 s3transfer-0.11.2 segtok-1.5.11 sortedcontainers-2.4.0 sqlitedict-2.1.0 transformer-smaller-training-vocab-0.4.0 wikipedia-api-0.8.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Extracting and Normalizing Flair Word Embeddings for Text Data\n",
        "\n",
        "*  This code uses the Flair library to extract word embeddings for each review in the dataset. It loads GloVe embeddings via WordEmbeddings and pools them into document embeddings using DocumentPoolEmbeddings. A function is defined to obtain embeddings for each review, and the resulting embeddings are stored in a new column in the dataset. Rows with None embeddings are dropped, and the embeddings are normalized for further use in machine learning models.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "LRs-LsIOhMDx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from flair.data import Sentence\n",
        "from flair.embeddings import WordEmbeddings, DocumentPoolEmbeddings\n",
        "from sklearn.preprocessing import normalize\n",
        "\n",
        "\n",
        "# Load GloVe embeddings\n",
        "glove_embedding = WordEmbeddings('glove')\n",
        "\n",
        "# Create a DocumentPoolEmbeddings instance\n",
        "document_embeddings = DocumentPoolEmbeddings([glove_embedding])\n",
        "\n",
        "# Function to get Flair embeddings for each review text\n",
        "def get_flair_embeddings(text):\n",
        "    if isinstance(text, str) and text.strip():  # Ensure the text is a valid, non-empty string\n",
        "        sentence = Sentence(text)\n",
        "        document_embeddings.embed(sentence)\n",
        "        return sentence.get_embedding().cpu().numpy()  # Convert to NumPy for easy processing\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "\n",
        "\n",
        "# Extract embedding\n",
        "data['flair_embeddings'] = data['cleaned_text'].apply(get_flair_embeddings)\n",
        "\n",
        "# Drop rows with None embeddings\n",
        "data = data.dropna(subset=['flair_embeddings'])\n",
        "\n",
        "# Normalize embeddings\n",
        "data['flair_embeddings'] = data['flair_embeddings'].apply(lambda x: normalize([x])[0])\n",
        "\n"
      ],
      "metadata": {
        "id": "FLU6utpDhKmD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Saving and Downloading Preprocessed Data\n",
        "\n",
        "*  This code saves the preprocessed dataset into a CSV file named preprocessed_data.csv and then facilitates the download of the file to the user's local system via Google Colab.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "fzpOSMGF0jFA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Save preprocessed data\n",
        "data.to_csv('preprocessed_data.csv', index=False)\n",
        "\n",
        "from google.colab import files\n",
        "files.download('preprocessed_data.csv')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "OtnazlPlhNGt",
        "outputId": "4745eeb2-3018-46b4-d4a5-dcd8f63b46dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_7c41df17-8d8e-4092-b9a2-d3924485ed9b\", \"preprocessed_data.csv\", 6994797)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Module 1: Deep Learning for Supervised Prediction**"
      ],
      "metadata": {
        "id": "LfB2ZF8ezOdD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "This part of the code defines and trains different machine learning models, including a FeedForward Neural Network (FFNN), Long Short-Term Memory (LSTM) model, and Convolutional Neural Network (CNN), using the cleaned and preprocessed data. The models are designed to predict drug satisfaction scores, and the training process includes using class weights to address class imbalance, regularization techniques like dropout, and early stopping to prevent overfitting. The models are compiled using different loss functions (e.g., mean squared error for regression) and optimizers (e.g., Adam, RMSprop). The data is preprocessed by scaling the embeddings and splitting it into training and test sets, followed by fitting the models with callbacks such as learning rate scheduling and early stopping for better performance.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "gCFhDXDQkSpB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Feed-forward Neural Network (FFNN)**"
      ],
      "metadata": {
        "id": "csS1eY10zyBW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "This code imports necessary libraries and ensures that the Flair embeddings, which were previously extracted from the text reviews, are correctly converted into a NumPy array of numeric vectors. It prints the shape of the embeddings to verify they have been processed properly and are ready for model training. Extract Flair Embeddings\n"
      ],
      "metadata": {
        "id": "QpaVplAiZSMe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, BatchNormalization\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import numpy as np\n",
        "\n",
        "# Ensure Flair embeddings are properly extracted as numeric arrays\n",
        "# Convert 'flair_embeddings' column to a NumPy array of numeric vectors\n",
        "flair_embeddings = np.array(data['flair_embeddings'].tolist())\n",
        "\n",
        "# Check if the embeddings are properly extracted\n",
        "print(f\"Flair embeddings shape: {flair_embeddings.shape}\")\n"
      ],
      "metadata": {
        "id": "3D9FYLpnzwxv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5740e0ec-34f1-492d-be93-eed4c7515e8b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Flair embeddings shape: (3676, 100)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Train-Test Split\n",
        "This code splits the dataset into training and testing sets using an 80-20 split. The Flair embeddings (X) are used as input features, and the Satisfaction labels (y) are used as the target variable. The data is divided using train_test_split from sklearn, ensuring that 80% of the data is used for training and 20% for testing, with a fixed random seed (random_state=42) for reproducibility. The resulting shapes of the training and testing sets are then printed for confirmation.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "3uDxIUjlZXqB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Split data into train and test sets (80% training, 20% testing)\n",
        "X = flair_embeddings\n",
        "y = data['Satisfaction']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Print the shapes to confirm successful split\n",
        "print(f\"X_train shape: {X_train.shape}\")\n",
        "print(f\"X_test shape: {X_test.shape}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ydr0-hItZMyN",
        "outputId": "750a1d91-c799-4c67-d2c8-78299b0f92a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train shape: (2940, 100)\n",
            "X_test shape: (736, 100)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Normalize the Data"
      ],
      "metadata": {
        "id": "xLB2j_vpZYx2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Normalize Flair embeddings\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)  # Normalize training data\n",
        "X_test_scaled = scaler.transform(X_test)  # Normalize test data\n",
        "\n",
        "# Print the shapes to confirm successful preprocessing\n",
        "print(f\"X_train_scaled shape: {X_train_scaled.shape}\")\n",
        "print(f\"X_test_scaled shape: {X_test_scaled.shape}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rGpNroVgZbab",
        "outputId": "a44983b7-187a-48fa-8200-6f81b3f851ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train_scaled shape: (2940, 100)\n",
            "X_test_scaled shape: (736, 100)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Define the FFNN Model"
      ],
      "metadata": {
        "id": "aGzjT-geZdhg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the FFNN model\n",
        "embedding_dim = X_train_scaled.shape[1]\n",
        "\n",
        "ffnn_model = Sequential([\n",
        "    Dense(256, activation='relu', input_dim=embedding_dim),\n",
        "    BatchNormalization(),\n",
        "    Dropout(0.4),\n",
        "    Dense(128, activation='relu'),\n",
        "    BatchNormalization(),\n",
        "    Dropout(0.3),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dense(1, activation='linear')  # For regression\n",
        "])\n",
        "\n",
        "# Summary of the model\n",
        "ffnn_model.summary()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "54PvuG90ZfPs",
        "outputId": "c2c010c7-2f98-4537-aae6-25b4e2050f7a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential_18\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_18\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ dense_51 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │          \u001b[38;5;34m25,856\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_6                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │           \u001b[38;5;34m1,024\u001b[0m │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_26 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_52 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │          \u001b[38;5;34m32,896\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_7                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │             \u001b[38;5;34m512\u001b[0m │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_27 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_53 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │           \u001b[38;5;34m8,256\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_54 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │              \u001b[38;5;34m65\u001b[0m │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ dense_51 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">25,856</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_6                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_26 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_52 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_7                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │             <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_27 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_53 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_54 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">65</span> │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m68,609\u001b[0m (268.00 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">68,609</span> (268.00 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m67,841\u001b[0m (265.00 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">67,841</span> (265.00 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m768\u001b[0m (3.00 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">768</span> (3.00 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Compile the Model"
      ],
      "metadata": {
        "id": "YLm3XuptZj02"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Compile the model\n",
        "ffnn_model.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error', metrics=['mae'])\n"
      ],
      "metadata": {
        "id": "lFhM1AGhZkZz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Define Callbacks"
      ],
      "metadata": {
        "id": "IrFIJwyCZm58"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define callbacks\n",
        "lr_scheduler = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, min_lr=1e-6)\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n"
      ],
      "metadata": {
        "id": "iHLglkGdZmWq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Train the Model"
      ],
      "metadata": {
        "id": "TqP-OcrfZrBJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model\n",
        "ffnn_model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, validation_split=0.2, callbacks=[lr_scheduler, early_stopping])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iFeQL2hJZsZ4",
        "outputId": "2e97a874-a8b1-4951-d48b-135544d5a54a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 52ms/step - loss: 6.5212 - mae: 2.0835 - val_loss: 4.7331 - val_mae: 1.7842 - learning_rate: 0.0010\n",
            "Epoch 2/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 3ms/step - loss: 2.7356 - mae: 1.3755 - val_loss: 2.9493 - val_mae: 1.4930 - learning_rate: 0.0010\n",
            "Epoch 3/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 2.5344 - mae: 1.3330 - val_loss: 2.2456 - val_mae: 1.2906 - learning_rate: 0.0010\n",
            "Epoch 4/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 2.3246 - mae: 1.2537 - val_loss: 2.0741 - val_mae: 1.2275 - learning_rate: 0.0010\n",
            "Epoch 5/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 2.0818 - mae: 1.1912 - val_loss: 2.0031 - val_mae: 1.1824 - learning_rate: 0.0010\n",
            "Epoch 6/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.9920 - mae: 1.1621 - val_loss: 1.9430 - val_mae: 1.1503 - learning_rate: 0.0010\n",
            "Epoch 7/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.8100 - mae: 1.0994 - val_loss: 2.0160 - val_mae: 1.1520 - learning_rate: 0.0010\n",
            "Epoch 8/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.8057 - mae: 1.0882 - val_loss: 1.9619 - val_mae: 1.1244 - learning_rate: 0.0010\n",
            "Epoch 9/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.7476 - mae: 1.0764 - val_loss: 1.9672 - val_mae: 1.1400 - learning_rate: 0.0010\n",
            "Epoch 10/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.7112 - mae: 1.0592 - val_loss: 1.8594 - val_mae: 1.0918 - learning_rate: 5.0000e-04\n",
            "Epoch 11/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.6109 - mae: 1.0279 - val_loss: 1.8817 - val_mae: 1.1004 - learning_rate: 5.0000e-04\n",
            "Epoch 12/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.4791 - mae: 0.9712 - val_loss: 1.8503 - val_mae: 1.0867 - learning_rate: 5.0000e-04\n",
            "Epoch 13/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 1.5658 - mae: 1.0130 - val_loss: 1.8575 - val_mae: 1.0896 - learning_rate: 5.0000e-04\n",
            "Epoch 14/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.5109 - mae: 0.9954 - val_loss: 1.8285 - val_mae: 1.0645 - learning_rate: 5.0000e-04\n",
            "Epoch 15/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.4796 - mae: 0.9782 - val_loss: 1.7909 - val_mae: 1.0580 - learning_rate: 5.0000e-04\n",
            "Epoch 16/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.2996 - mae: 0.9137 - val_loss: 1.8237 - val_mae: 1.0767 - learning_rate: 5.0000e-04\n",
            "Epoch 17/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.4071 - mae: 0.9627 - val_loss: 1.8123 - val_mae: 1.0605 - learning_rate: 5.0000e-04\n",
            "Epoch 18/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.3570 - mae: 0.9293 - val_loss: 1.8040 - val_mae: 1.0705 - learning_rate: 5.0000e-04\n",
            "Epoch 19/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.3540 - mae: 0.9350 - val_loss: 1.8107 - val_mae: 1.0551 - learning_rate: 2.5000e-04\n",
            "Epoch 20/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.3206 - mae: 0.9251 - val_loss: 1.7978 - val_mae: 1.0569 - learning_rate: 2.5000e-04\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x79316b113110>"
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Recurrent Neural Network (LSTM)**"
      ],
      "metadata": {
        "id": "6cUA9kmg0BFL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Prepare the Flair Embeddings"
      ],
      "metadata": {
        "id": "1FvhcGKHadPz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, LSTM, Dropout, Input\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "# Ensure Flair embeddings are converted to a NumPy array\n",
        "flair_embeddings = np.array(data['flair_embeddings'].tolist())\n",
        "\n",
        "# Get the actual embedding dimension\n",
        "embedding_dim = len(flair_embeddings[0])\n"
      ],
      "metadata": {
        "id": "WzQgrkzY0Afn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Normalize the Embeddings"
      ],
      "metadata": {
        "id": "0b4gjp6tagu0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Normalize the embeddings using StandardScaler\n",
        "scaler = StandardScaler()\n",
        "flair_embeddings_scaled = scaler.fit_transform(flair_embeddings)\n",
        "\n",
        "# Check the shape of the scaled data\n",
        "print(f\"Scaled Flair Embeddings shape: {flair_embeddings_scaled.shape}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z7OnikowagKf",
        "outputId": "e8f328c2-a2fc-43ac-f870-87247cb82a59"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Scaled Flair Embeddings shape: (3676, 100)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Split the Data into Train and Test Sets"
      ],
      "metadata": {
        "id": "8AFp5XRVamXB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the data into train and test sets (80% training, 20% testing)\n",
        "X_train, X_test, y_train, y_test = train_test_split(flair_embeddings_scaled, data['Satisfaction'], test_size=0.2, random_state=42)\n",
        "\n",
        "# Print the shapes to confirm successful split\n",
        "print(f\"X_train shape: {X_train.shape}\")\n",
        "print(f\"X_test shape: {X_test.shape}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5LOOoyC5am5w",
        "outputId": "db6d79ac-b5d7-4339-b29c-36d788d30bf2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train shape: (2940, 100)\n",
            "X_test shape: (736, 100)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Reshape Data for LSTM"
      ],
      "metadata": {
        "id": "AMH1Sl0uap8Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Reshape data for LSTM (samples, timesteps, features)\n",
        "X_train_lstm = X_train.reshape((X_train.shape[0], 1, embedding_dim))\n",
        "X_test_lstm = X_test.reshape((X_test.shape[0], 1, embedding_dim))\n",
        "\n",
        "# Check the reshaped data\n",
        "print(f\"X_train_lstm shape: {X_train_lstm.shape}\")\n",
        "print(f\"X_test_lstm shape: {X_test_lstm.shape}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p6FJBpevarsR",
        "outputId": "74361c19-007e-4804-81ed-9d162c2491da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train_lstm shape: (2940, 1, 100)\n",
            "X_test_lstm shape: (736, 1, 100)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Define the LSTM Model"
      ],
      "metadata": {
        "id": "CDdpFEjHauvk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the LSTM model\n",
        "lstm_model = Sequential([\n",
        "    Input(shape=(1, embedding_dim)),  # Use the correct embedding dimension\n",
        "    LSTM(128, return_sequences=True),\n",
        "    Dropout(0.3),\n",
        "    LSTM(64),\n",
        "    Dense(1, activation='linear')  # For regression\n",
        "])\n",
        "\n",
        "# Summary of the model\n",
        "lstm_model.summary()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "id": "xQqQY9guawfl",
        "outputId": "bc3c0b29-904f-4d5a-fe85-b1d752e96623"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential_19\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_19\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ lstm_8 (\u001b[38;5;33mLSTM\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)              │         \u001b[38;5;34m117,248\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_28 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m128\u001b[0m)              │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ lstm_9 (\u001b[38;5;33mLSTM\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │          \u001b[38;5;34m49,408\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_55 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │              \u001b[38;5;34m65\u001b[0m │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ lstm_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)              │         <span style=\"color: #00af00; text-decoration-color: #00af00\">117,248</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_28 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)              │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ lstm_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">49,408</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_55 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">65</span> │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m166,721\u001b[0m (651.25 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">166,721</span> (651.25 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m166,721\u001b[0m (651.25 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">166,721</span> (651.25 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Compile the Model"
      ],
      "metadata": {
        "id": "DJQdiCwbayvF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Compile the LSTM model\n",
        "lstm_model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n"
      ],
      "metadata": {
        "id": "sC5m-fKpa0r9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        " Define Early Stopping Callback"
      ],
      "metadata": {
        "id": "U857JH9Ua2lF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define early stopping callback to prevent overfitting\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n"
      ],
      "metadata": {
        "id": "g4AUA2OHa4Fr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        " Train the Model"
      ],
      "metadata": {
        "id": "ohT24XCsa6DR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model\n",
        "history = lstm_model.fit(\n",
        "    X_train_lstm, y_train,\n",
        "    validation_split=0.2,\n",
        "    epochs=50,\n",
        "    batch_size=32,\n",
        "    callbacks=[early_stopping]\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LvgEpQRNa7jb",
        "outputId": "7606e65e-589f-4c28-be65-b72583c5d7f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step - loss: 11.1026 - mae: 2.8885 - val_loss: 3.1583 - val_mae: 1.4493\n",
            "Epoch 2/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 2.5173 - mae: 1.3183 - val_loss: 2.2954 - val_mae: 1.2837\n",
            "Epoch 3/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 2.0300 - mae: 1.2042 - val_loss: 2.1132 - val_mae: 1.2218\n",
            "Epoch 4/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 12ms/step - loss: 1.7015 - mae: 1.0798 - val_loss: 2.0532 - val_mae: 1.1854\n",
            "Epoch 5/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 14ms/step - loss: 1.5642 - mae: 1.0251 - val_loss: 2.0984 - val_mae: 1.1661\n",
            "Epoch 6/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 14ms/step - loss: 1.5243 - mae: 0.9962 - val_loss: 1.9693 - val_mae: 1.1296\n",
            "Epoch 7/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.3802 - mae: 0.9491 - val_loss: 1.9550 - val_mae: 1.1194\n",
            "Epoch 8/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.2573 - mae: 0.8863 - val_loss: 1.9515 - val_mae: 1.1275\n",
            "Epoch 9/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 1.2018 - mae: 0.8676 - val_loss: 1.9894 - val_mae: 1.1158\n",
            "Epoch 10/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 9ms/step - loss: 1.1145 - mae: 0.8297 - val_loss: 1.9447 - val_mae: 1.1026\n",
            "Epoch 11/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 1.0089 - mae: 0.7899 - val_loss: 1.9296 - val_mae: 1.1038\n",
            "Epoch 12/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.9243 - mae: 0.7464 - val_loss: 1.9129 - val_mae: 1.0894\n",
            "Epoch 13/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.9372 - mae: 0.7506 - val_loss: 1.9168 - val_mae: 1.1013\n",
            "Epoch 14/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 0.8962 - mae: 0.7424 - val_loss: 1.9245 - val_mae: 1.0913\n",
            "Epoch 15/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 10ms/step - loss: 0.8588 - mae: 0.7119 - val_loss: 2.0004 - val_mae: 1.1028\n",
            "Epoch 16/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.8345 - mae: 0.7134 - val_loss: 1.9359 - val_mae: 1.0811\n",
            "Epoch 17/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 0.7207 - mae: 0.6650 - val_loss: 1.9649 - val_mae: 1.0986\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Evaluate the Model"
      ],
      "metadata": {
        "id": "-2kcEt34a9p6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the model on the test set\n",
        "results = lstm_model.evaluate(X_test_lstm, y_test)\n",
        "print(f\"Test Loss: {results[0]}, Test MAE: {results[1]}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7jXNeK2ha_e1",
        "outputId": "3fa3caa6-849a-4560-e973-f2a1c5b48b1f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 1.8526 - mae: 1.0405\n",
            "Test Loss: 1.863961100578308, Test MAE: 1.0480760335922241\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Convolutional Neural Network (CNN)**"
      ],
      "metadata": {
        "id": "tlg0sosv0QRm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv1D, GlobalMaxPooling1D, Dense, Dropout, Input\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "import numpy as np\n",
        "\n",
        "# Reshape the input data to add the \"time dimension\" (1 in this case)\n",
        "X_train_cnn = np.expand_dims(X_train, axis=1)  # Add time dimension\n",
        "X_test_cnn = np.expand_dims(X_test, axis=1)  # Add time dimension\n",
        "\n",
        "print(f\"Reshaped X_train_cnn shape: {X_train_cnn.shape}\")\n",
        "print(f\"Reshaped X_test_cnn shape: {X_test_cnn.shape}\")\n",
        "\n",
        "# Define the CNN model\n",
        "cnn_model = Sequential([\n",
        "    Input(shape=(1, embedding_dim)),  # Input shape (1, embedding_dim)\n",
        "    Conv1D(filters=128, kernel_size=1, activation='relu'),  # Kernel size = 1\n",
        "    GlobalMaxPooling1D(),\n",
        "    Dropout(0.3),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dropout(0.2),\n",
        "    Dense(1, activation='linear')  # For regression\n",
        "])\n",
        "\n",
        "# Compile the CNN model\n",
        "cnn_model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n",
        "\n",
        "# Define early stopping\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n",
        "\n",
        "# Train the model\n",
        "cnn_model.fit(X_train_cnn, y_train, epochs=50, batch_size=32, validation_split=0.2, callbacks=[early_stopping])\n"
      ],
      "metadata": {
        "id": "_Nh07ULj0edM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1f6843c4-a68f-475d-ff73-662f735298e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reshaped X_train_cnn shape: (2940, 1, 100)\n",
            "Reshaped X_test_cnn shape: (736, 1, 100)\n",
            "Epoch 1/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 45ms/step - loss: 5.3977 - mae: 1.8928 - val_loss: 2.4826 - val_mae: 1.3685\n",
            "Epoch 2/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 2.8498 - mae: 1.4159 - val_loss: 2.1855 - val_mae: 1.2913\n",
            "Epoch 3/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 2.5590 - mae: 1.3512 - val_loss: 2.0979 - val_mae: 1.2519\n",
            "Epoch 4/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 2.2985 - mae: 1.2745 - val_loss: 2.0587 - val_mae: 1.2395\n",
            "Epoch 5/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 2.0981 - mae: 1.2193 - val_loss: 1.9711 - val_mae: 1.2104\n",
            "Epoch 6/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 2.0037 - mae: 1.1850 - val_loss: 1.9655 - val_mae: 1.2039\n",
            "Epoch 7/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 2.0281 - mae: 1.1938 - val_loss: 1.9321 - val_mae: 1.1772\n",
            "Epoch 8/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.7807 - mae: 1.0924 - val_loss: 1.9854 - val_mae: 1.1955\n",
            "Epoch 9/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.7561 - mae: 1.0918 - val_loss: 1.9214 - val_mae: 1.1670\n",
            "Epoch 10/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 1.7287 - mae: 1.0849 - val_loss: 1.9100 - val_mae: 1.1632\n",
            "Epoch 11/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 1.7370 - mae: 1.0690 - val_loss: 1.8571 - val_mae: 1.1469\n",
            "Epoch 12/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 1.5995 - mae: 1.0350 - val_loss: 1.9062 - val_mae: 1.1535\n",
            "Epoch 13/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.6615 - mae: 1.0574 - val_loss: 1.8896 - val_mae: 1.1418\n",
            "Epoch 14/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 1.4623 - mae: 0.9842 - val_loss: 1.8847 - val_mae: 1.1365\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x79316fe6a5d0>"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Add Accuracy to the Model Compilation\n"
      ],
      "metadata": {
        "id": "9WUiLR8tDMYv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, LSTM, Conv1D, MaxPooling1D, Embedding, Flatten\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "# FFNN model for regression (change loss function)\n",
        "ffnn_model.compile(optimizer=Adam(learning_rate=0.0001), loss='mean_squared_error', metrics=['mae'])\n",
        "\n",
        "# CNN model for regression (change loss function)\n",
        "cnn_model.compile(optimizer=Adam(), loss='mean_squared_error', metrics=['mae'])\n",
        "\n",
        "# LSTM model for regression (change loss function)\n",
        "lstm_model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n"
      ],
      "metadata": {
        "id": "O9xidourDKU8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **2. Train the Model**"
      ],
      "metadata": {
        "id": "Rw5Bttms0mfa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Load and Preprocess Data"
      ],
      "metadata": {
        "id": "AqHklVmKbqVD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, BatchNormalization, Input, Dropout\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping, LearningRateScheduler\n",
        "from tensorflow.keras.metrics import AUC\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "import numpy as np\n",
        "# Assuming 'flair_embeddings' is already a numpy array or a format that doesn't require conversion\n",
        "X_train_embeddings = data_cleaned['flair_embeddings'].tolist()  # Directly convert to list if necessary\n",
        "X_train_embeddings = np.array(X_train_embeddings)  # Ensure it's a numpy array\n",
        "y = data_cleaned['Satisfaction'].astype(int)  # Convert labels to integer type\n",
        "\n",
        "# Check shapes again to ensure everything is correctly loaded\n",
        "print(f\"X_train_embeddings shape: {X_train_embeddings.shape}\")\n",
        "print(f\"y shape: {y.shape}\")\n"
      ],
      "metadata": {
        "id": "3PHGIPKz0hGE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "511d531f-3322-4410-a5ee-d32683cadab6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train_embeddings shape: (3676, 100)\n",
            "y shape: (3676,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Split Data into Train and Test Sets"
      ],
      "metadata": {
        "id": "iYGutwYXbrZW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the data correctly into train and test sets (80% training, 20% testing)\n",
        "X_train_embeddings, X_test_embeddings, y_train, y_test = train_test_split(\n",
        "    X_train_embeddings, y, test_size=0.2, random_state=42\n",
        ")\n",
        "\n",
        "# Convert labels to categorical (one-hot encoding)\n",
        "y_train = to_categorical(y_train - 1, num_classes=5)\n",
        "y_test = to_categorical(y_test - 1, num_classes=5)\n",
        "\n",
        "# Check for any missing values in the dataset after preprocessing\n",
        "print(f\"Missing values in X_train_embeddings: {np.isnan(X_train_embeddings).sum()}\")\n",
        "print(f\"Missing values in y_train: {np.isnan(y_train).sum()}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZL4JUw1VbtLf",
        "outputId": "eadd2cce-0c09-4f25-ddc7-f53d7bbf41c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Missing values in X_train_embeddings: 0\n",
            "Missing values in y_train: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Define Learning Rate Scheduler Function"
      ],
      "metadata": {
        "id": "PaaxQ9zGbvfR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Learning rate scheduler function to adjust learning rate during training\n",
        "def scheduler(epoch, lr):\n",
        "    if epoch > 10:\n",
        "        lr = lr * 0.9  # Gradual decay after 5 epochs\n",
        "    return lr\n"
      ],
      "metadata": {
        "id": "Gh_z4pjcbxF2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Set Early Stopping and Learning Rate Scheduler Callbacks"
      ],
      "metadata": {
        "id": "et51JuEhby7O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Early stopping to prevent overfitting and learning rate scheduler for adaptive learning rate\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
        "lr_scheduler = LearningRateScheduler(scheduler)\n",
        "# Define class weights to handle imbalanced data\n",
        "class_weights = {0: 1, 1: 10, 2: 5, 3: 3, 4: 1}\n"
      ],
      "metadata": {
        "id": "HC49Toj8b0qO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Define the FFNN Model"
      ],
      "metadata": {
        "id": "Uh6kDs5pb6JW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define FFNN model for multi-class classification\n",
        "ffnn_model = Sequential([\n",
        "    Input(shape=(X_train_embeddings.shape[1],)),  # Input layer with appropriate input shape\n",
        "    Dense(512, activation='relu'),  # First hidden layer with 512 units and ReLU activation\n",
        "    BatchNormalization(),  # Batch normalization for better training\n",
        "    Dropout(0.5),  # Dropout for regularization\n",
        "    Dense(256, activation='relu'),  # Second hidden layer with 256 units\n",
        "    Dropout(0.5),  # Dropout for regularization\n",
        "    Dense(128, activation='relu'),  # Third hidden layer with 128 units\n",
        "    Dense(64, activation='relu'),  # Fourth hidden layer with 64 units\n",
        "    Dense(32, activation='relu'),  # Fifth hidden layer with 32 units\n",
        "    Dense(5, activation='softmax')  # Output layer with 5 classes (for multi-class classification)\n",
        "])\n",
        "\n",
        "# Print the model summary to check the architecture\n",
        "ffnn_model.summary()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 429
        },
        "id": "FHx8kRmab8B4",
        "outputId": "4c3e8eb5-ec2f-4644-c721-873722e17621"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential_20\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_20\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ dense_56 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │          \u001b[38;5;34m51,712\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_8                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │           \u001b[38;5;34m2,048\u001b[0m │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_29 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_57 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │         \u001b[38;5;34m131,328\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_30 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_58 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │          \u001b[38;5;34m32,896\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_59 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │           \u001b[38;5;34m8,256\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_60 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │           \u001b[38;5;34m2,080\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_61 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m)                   │             \u001b[38;5;34m165\u001b[0m │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ dense_56 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">51,712</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_8                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,048</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_29 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_57 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                 │         <span style=\"color: #00af00; text-decoration-color: #00af00\">131,328</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dropout_30 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_58 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_59 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_60 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_61 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">165</span> │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m228,485\u001b[0m (892.52 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">228,485</span> (892.52 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m227,461\u001b[0m (888.52 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">227,461</span> (888.52 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m1,024\u001b[0m (4.00 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> (4.00 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Compile the Model and Train the Model"
      ],
      "metadata": {
        "id": "g_lm9kMtb-jm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.optimizers import Adam, RMSprop\n",
        "\n",
        "# Use a different optimizer (RMSprop or AdamW)\n",
        "optimizer = RMSprop(learning_rate=0.001)\n",
        "\n",
        "ffnn_model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy', AUC()])\n",
        "\n",
        "history_ffnn = ffnn_model.fit(\n",
        "    X_train_embeddings_scaled, y_train,\n",
        "    validation_split=0.2,\n",
        "    epochs=50,\n",
        "    batch_size=32,\n",
        "    class_weight=class_weights_dict,\n",
        "    callbacks=[early_stopping, lr_scheduler]\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kxsV7mQOcCA2",
        "outputId": "891d5d4a-1b09-4ca2-f858-ffe23c142b96"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 46ms/step - accuracy: 0.5777 - auc_7: 0.8549 - loss: 1.0286 - val_accuracy: 0.4303 - val_auc_7: 0.7499 - val_loss: 1.3945 - learning_rate: 0.0010\n",
            "Epoch 2/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.5747 - auc_7: 0.8538 - loss: 0.9973 - val_accuracy: 0.4711 - val_auc_7: 0.7505 - val_loss: 1.4200 - learning_rate: 0.0010\n",
            "Epoch 3/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.6097 - auc_7: 0.8701 - loss: 0.9598 - val_accuracy: 0.4966 - val_auc_7: 0.7714 - val_loss: 1.3767 - learning_rate: 0.0010\n",
            "Epoch 4/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.5880 - auc_7: 0.8669 - loss: 0.9815 - val_accuracy: 0.4524 - val_auc_7: 0.7571 - val_loss: 1.4557 - learning_rate: 0.0010\n",
            "Epoch 5/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.6069 - auc_7: 0.8717 - loss: 0.9405 - val_accuracy: 0.5000 - val_auc_7: 0.7799 - val_loss: 1.3458 - learning_rate: 0.0010\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Evaluate the Model"
      ],
      "metadata": {
        "id": "LtOZy27-cE7Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the model on the test data\n",
        "test_loss, test_accuracy, test_auc = ffnn_model.evaluate(X_test_embeddings, y_test)\n",
        "\n",
        "# Print the test evaluation results (loss, accuracy, and AUC)\n",
        "print(f\"Test Loss: {test_loss},  Test AUC: {test_auc}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8aZxCbFccG3k",
        "outputId": "40ac2468-9fd6-4032-abdd-40385820c546"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.1633 - auc_7: 0.5046 - loss: 1.8224\n",
            "Test Loss: 1.8191382884979248,  Test AUC: 0.5057892203330994\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "CNN Model for Predicting Satisfaction Scores Using Flair Embeddings"
      ],
      "metadata": {
        "id": "RO_zVTiTb3BK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Ensure input data is reshaped correctly\n",
        "X_train_embeddings_reshaped = X_train_embeddings.reshape(X_train_embeddings.shape[0], X_train_embeddings.shape[1], 1)\n",
        "\n",
        "# Check the shape after reshaping\n",
        "print(X_train_embeddings_reshaped.shape)\n",
        "\n",
        "# Define the CNN model with a more compatible kernel size\n",
        "cnn_model = Sequential([\n",
        "    Conv1D(filters=128, kernel_size=3, activation='relu', input_shape=(X_train_embeddings_reshaped.shape[1], 1)),\n",
        "    GlobalMaxPooling1D(),\n",
        "    Dropout(0.3),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dense(1, activation='linear')\n",
        "])\n",
        "\n",
        "# Compile the CNN model\n",
        "cnn_model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n",
        "\n",
        "# Train the CNN model\n",
        "history_cnn = cnn_model.fit(\n",
        "    X_train_embeddings_reshaped,  # Use the reshaped Flair embeddings\n",
        "    y_train,\n",
        "    validation_split=0.2,\n",
        "    epochs=10,\n",
        "    batch_size=32,\n",
        "    callbacks=[early_stopping]\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yOJZ-8QHJ1Xs",
        "outputId": "902be6d7-1a6d-4d3a-a847-6539a345168e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2940, 100, 1)\n",
            "Epoch 1/10\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 56ms/step - loss: 0.1658 - mae: 0.3103 - val_loss: 0.1604 - val_mae: 0.3111\n",
            "Epoch 2/10\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - loss: 0.1605 - mae: 0.3198 - val_loss: 0.1607 - val_mae: 0.3052\n",
            "Epoch 3/10\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.1603 - mae: 0.3194 - val_loss: 0.1603 - val_mae: 0.3097\n",
            "Epoch 4/10\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.1602 - mae: 0.3196 - val_loss: 0.1602 - val_mae: 0.3130\n",
            "Epoch 5/10\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - loss: 0.1601 - mae: 0.3199 - val_loss: 0.1601 - val_mae: 0.3138\n",
            "Epoch 6/10\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1601 - mae: 0.3199 - val_loss: 0.1601 - val_mae: 0.3134\n",
            "Epoch 7/10\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1600 - mae: 0.3197 - val_loss: 0.1601 - val_mae: 0.3148\n",
            "Epoch 8/10\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1600 - mae: 0.3199 - val_loss: 0.1600 - val_mae: 0.3163\n",
            "Epoch 9/10\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 0.1600 - mae: 0.3200 - val_loss: 0.1600 - val_mae: 0.3173\n",
            "Epoch 10/10\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 0.1600 - mae: 0.3200 - val_loss: 0.1600 - val_mae: 0.3172\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "LSTM Model for Predicting Satisfaction Scores Using Flair Embeddings"
      ],
      "metadata": {
        "id": "FHd_4Yc8ceCA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lstm_model = Sequential([\n",
        "    Input(shape=(None, 300)),\n",
        "    LSTM(256, return_sequences=True),  # Increase the number of LSTM units\n",
        "    Dropout(0.3),\n",
        "    LSTM(128),\n",
        "    Dense(64, activation='relu'),  # Additional Dense layer for complexity\n",
        "    Dense(1, activation='linear')\n",
        "])\n",
        "\n",
        "# Compile the LSTM model (regression or classification)\n",
        "lstm_model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n",
        "\n",
        "# Reshape the input\n",
        "X_train_embeddings_reshaped = X_train_embeddings.reshape(X_train_embeddings.shape[0], 1, X_train_embeddings.shape[1])\n",
        "\n",
        "# Train the model\n",
        "history_lstm = lstm_model.fit(\n",
        "    X_train_embeddings_reshaped,\n",
        "    y_train,\n",
        "    validation_split=0.2,\n",
        "    epochs=20,  # Increased epochs to allow more training\n",
        "    batch_size=32,\n",
        "    callbacks=[early_stopping]\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hJfH7DhuJ258",
        "outputId": "702391df-7ff4-4065-f8d6-7ac26d276107"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - loss: 0.1685 - mae: 0.2939 - val_loss: 0.1600 - val_mae: 0.3180\n",
            "Epoch 2/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.1601 - mae: 0.3196 - val_loss: 0.1600 - val_mae: 0.3192\n",
            "Epoch 3/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.1600 - mae: 0.3198 - val_loss: 0.1600 - val_mae: 0.3206\n",
            "Epoch 4/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.1600 - mae: 0.3200 - val_loss: 0.1600 - val_mae: 0.3201\n",
            "Epoch 5/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.1600 - mae: 0.3198 - val_loss: 0.1600 - val_mae: 0.3205\n",
            "Epoch 6/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.1600 - mae: 0.3199 - val_loss: 0.1600 - val_mae: 0.3200\n",
            "Epoch 7/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 0.1600 - mae: 0.3200 - val_loss: 0.1600 - val_mae: 0.3201\n",
            "Epoch 8/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.1600 - mae: 0.3199 - val_loss: 0.1600 - val_mae: 0.3206\n",
            "Epoch 9/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.1600 - mae: 0.3201 - val_loss: 0.1600 - val_mae: 0.3201\n",
            "Epoch 10/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step - loss: 0.1600 - mae: 0.3200 - val_loss: 0.1600 - val_mae: 0.3200\n",
            "Epoch 11/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - loss: 0.1600 - mae: 0.3200 - val_loss: 0.1600 - val_mae: 0.3199\n",
            "Epoch 12/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.1600 - mae: 0.3199 - val_loss: 0.1600 - val_mae: 0.3201\n",
            "Epoch 13/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.1600 - mae: 0.3200 - val_loss: 0.1600 - val_mae: 0.3201\n",
            "Epoch 14/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.1600 - mae: 0.3200 - val_loss: 0.1600 - val_mae: 0.3199\n",
            "Epoch 15/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.1600 - mae: 0.3200 - val_loss: 0.1600 - val_mae: 0.3204\n",
            "Epoch 16/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.1600 - mae: 0.3200 - val_loss: 0.1600 - val_mae: 0.3198\n",
            "Epoch 17/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.1600 - mae: 0.3200 - val_loss: 0.1600 - val_mae: 0.3202\n",
            "Epoch 18/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.1600 - mae: 0.3200 - val_loss: 0.1600 - val_mae: 0.3200\n",
            "Epoch 19/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.1600 - mae: 0.3200 - val_loss: 0.1600 - val_mae: 0.3197\n",
            "Epoch 20/20\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - loss: 0.1600 - mae: 0.3200 - val_loss: 0.1600 - val_mae: 0.3202\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Check if y_train is one-hot encoded and convert to integer labels if\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "SKuZkU7i0qq2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.utils.class_weight import compute_class_weight\n",
        "import numpy as np\n",
        "\n",
        "# Check if y_train is one-hot encoded\n",
        "if y_train.ndim > 1:\n",
        "    # Convert one-hot encoded labels back to original integer labels\n",
        "    y_train_original = np.argmax(y_train, axis=1)\n",
        "else:\n",
        "    y_train_original = y_train\n",
        "\n",
        "# Print the shape and a sample of y_train_original to verify\n",
        "print(f\"Original y_train shape: {y_train_original.shape}\")\n",
        "print(f\"Sample y_train_original: {y_train_original[:5]}\")\n"
      ],
      "metadata": {
        "id": "wbgQHC9_0rA-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2517dbac-90b6-4133-b350-2c386b5d30c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original y_train shape: (2940,)\n",
            "Sample y_train_original: [0 4 3 0 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Compute class weights based on the target labels\n",
        "\n"
      ],
      "metadata": {
        "id": "VCxh2xIcdkkE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Evaluate for Categorical Scores:"
      ],
      "metadata": {
        "id": "FxYms3vS0-gn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Compute class weights based on the original labels\n",
        "class_weights = compute_class_weight(\n",
        "    class_weight='balanced',  # Automatically adjusts weights based on class distribution\n",
        "    classes=np.unique(y_train_original),  # Unique classes in the target variable\n",
        "    y=y_train_original  # Target labels (original, not one-hot encoded)\n",
        ")\n",
        "\n",
        "# Print the computed class weights for verification\n",
        "print(f\"Class weights: {class_weights}\")\n",
        "\n",
        "# Create a dictionary for class weights to pass to the model\n",
        "class_weights_dict = dict(enumerate(class_weights))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-VAILaT-dmuq",
        "outputId": "46fb790d-7596-4007-bf9b-7745d5121315"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Class weights: [0.72235872 2.33333333 1.68965517 1.2173913  0.56375839]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Define and compile the FFNN model\n",
        "\n"
      ],
      "metadata": {
        "id": "ML3lhzgmdo3V"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, BatchNormalization, Input, Dropout\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.metrics import AUC\n",
        "\n",
        "# Define the FFNN model architecture\n",
        "ffnn_model = Sequential([\n",
        "    Input(shape=(X_train_embeddings_scaled.shape[1],)),  # Input layer with embedding shape\n",
        "    Dense(512, activation='relu'),  # Dense layer with 512 units\n",
        "    BatchNormalization(),  # Batch normalization for better convergence\n",
        "    Dropout(0.5),  # Dropout layer for regularization\n",
        "    Dense(256, activation='relu'),  # Dense layer with 256 units\n",
        "    Dropout(0.5),  # Dropout layer for regularization\n",
        "    Dense(128, activation='relu'),  # Dense layer with 128 units\n",
        "    Dense(64, activation='relu'),  # Dense layer with 64 units\n",
        "    Dense(32, activation='relu'),  # Dense layer with 32 units\n",
        "    Dense(5, activation='softmax')  # Output layer for 5 classes with softmax activation\n",
        "])\n",
        "\n",
        "# Compile the model\n",
        "ffnn_model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy', AUC()])\n"
      ],
      "metadata": {
        "id": "cP0oWwJqdqw3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Train the model with class weights\n",
        "\n"
      ],
      "metadata": {
        "id": "3-mSfD8SdtOA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model with class weights to handle class imbalance\n",
        "history_ffnn = ffnn_model.fit(\n",
        "    X_train_embeddings_scaled, y_train,  # Input data and labels\n",
        "    validation_split=0.2,  # Use 20% of data for validation\n",
        "    epochs=50,  # Number of epochs for training\n",
        "    batch_size=32,  # Batch size for each update step\n",
        "    class_weight=class_weights_dict,  # Use class weights for imbalanced classes\n",
        "    callbacks=[early_stopping, lr_scheduler]  # Callbacks for early stopping and learning rate scheduling\n",
        ")\n",
        "\n",
        "# Print a summary of the training process\n",
        "print(f\"Training History: {history_ffnn.history}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3bIJJ1W_dvdm",
        "outputId": "392c40b5-3360-4770-e022-1ce0573d11e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m16s\u001b[0m 145ms/step - accuracy: 0.1899 - auc_8: 0.4873 - loss: 1.8225 - val_accuracy: 0.2296 - val_auc_8: 0.5796 - val_loss: 1.5918 - learning_rate: 0.0010\n",
            "Epoch 2/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 5ms/step - accuracy: 0.2518 - auc_8: 0.5830 - loss: 1.5593 - val_accuracy: 0.2806 - val_auc_8: 0.6136 - val_loss: 1.5697 - learning_rate: 0.0010\n",
            "Epoch 3/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.2869 - auc_8: 0.6260 - loss: 1.5135 - val_accuracy: 0.3265 - val_auc_8: 0.6617 - val_loss: 1.5141 - learning_rate: 0.0010\n",
            "Epoch 4/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.3014 - auc_8: 0.6536 - loss: 1.5105 - val_accuracy: 0.3793 - val_auc_8: 0.6931 - val_loss: 1.4717 - learning_rate: 0.0010\n",
            "Epoch 5/50\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.3499 - auc_8: 0.6857 - loss: 1.4688 - val_accuracy: 0.4150 - val_auc_8: 0.7195 - val_loss: 1.4267 - learning_rate: 0.0010\n",
            "Training History: {'accuracy': [0.19090135395526886, 0.244047611951828, 0.2933673560619354, 0.3227040767669678, 0.36054420471191406], 'auc_8': [0.5018346309661865, 0.5792116522789001, 0.6261776089668274, 0.6619642376899719, 0.6907380223274231], 'loss': [1.7081928253173828, 1.5737123489379883, 1.5280814170837402, 1.4887988567352295, 1.4586594104766846], 'val_accuracy': [0.22959183156490326, 0.2806122303009033, 0.3265306055545807, 0.3792516887187958, 0.41496598720550537], 'val_auc_8': [0.5795917510986328, 0.6136165857315063, 0.6617168188095093, 0.6930868625640869, 0.7194919586181641], 'val_loss': [1.5917773246765137, 1.5697396993637085, 1.5140572786331177, 1.4717495441436768, 1.4266904592514038], 'learning_rate': [0.0010000000474974513, 0.0010000000474974513, 0.0010000000474974513, 0.0010000000474974513, 0.0010000000474974513]}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. Evaluate the model on the test set\n",
        "\n"
      ],
      "metadata": {
        "id": "NpguTfb2d1Tw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the model on the test data\n",
        "evaluation_results = ffnn_model.evaluate(X_test_embeddings_scaled, y_test)\n",
        "\n",
        "# Unpack the evaluation results\n",
        "test_loss = evaluation_results[0]  # Loss on the test set\n",
        "test_accuracy = evaluation_results[2]  # Accuracy on the test set\n",
        "\n",
        "# Print the evaluation results\n",
        "print(f\"Test Loss: {test_loss}, Test Accuracy: {test_accuracy}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AuCvozc-d3Wt",
        "outputId": "e8329b61-42d9-4b2b-9164-61ca51fbd7c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.2872 - auc_8: 0.6207 - loss: 1.5830\n",
            "Test Loss: 1.5836632251739502, Test Accuracy: 0.6135143041610718\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score, f1_score\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Predict on the test set using Flair embeddings\n",
        "y_pred = ffnn_model.predict(X_test_embeddings).round()\n",
        "\n",
        "# Convert y_test to a numpy array and flatten it\n",
        "y_test = np.array(y_test).flatten()\n",
        "\n",
        "# Flatten the predictions as well\n",
        "y_pred = y_pred.flatten()\n",
        "\n",
        "\n",
        "misclassified = np.abs(y_pred - y_test) > 0.5\n",
        "\n",
        "# Check if there are any misclassified points\n",
        "if np.any(misclassified):\n",
        "    # Plot misclassified predictions (or ambiguous reviews)\n",
        "    plt.scatter(y_test[misclassified], y_pred[misclassified], color='red')\n",
        "    plt.title('Misclassified Predictions (Ambiguous Reviews)')\n",
        "    plt.xlabel('True Scores')\n",
        "    plt.ylabel('Predicted Scores')\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"No misclassified points with the current threshold.\")\n",
        "\n",
        "# Calculate accuracy and F1 score (optional)\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "f1 = f1_score(y_test, y_pred, average='weighted')\n",
        "\n",
        "print(f\"Accuracy: {accuracy}, F1 Score: {f1}\")\n"
      ],
      "metadata": {
        "id": "g7hnclYx0-ve",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "outputId": "b68917bf-bb47-4c4a-fb5e-33bf37743366"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step  \n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.8, F1 Score: 0.711111111111111\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **4. Visualize Training Progress**\n",
        "Plot Training and Validation Loss:\n",
        "\n"
      ],
      "metadata": {
        "id": "BUbmse-F1Cqx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# For FFNN model\n",
        "plt.plot(history_ffnn.history['loss'], label='Train Loss')\n",
        "plt.plot(history_ffnn.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.title('FFNN Loss Over Epochs')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "6Qfy5JdH1DYm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "fd26c2e3-0d0b-4e55-9043-316f4cb037e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plot Training and Validation MAE:"
      ],
      "metadata": {
        "id": "gK0pnbRL1rP5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# For CNN model\n",
        "plt.plot(history_cnn.history['loss'], label='Train Loss')\n",
        "plt.plot(history_cnn.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.title('CNN Loss Over Epochs')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "s4YUMVM11rpS",
        "outputId": "2085f45b-7e6c-4ea3-ad21-f8780e27f102"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plotting LSTM Training and Validation Loss Over Epochs\n",
        "\n"
      ],
      "metadata": {
        "id": "_tMr62bljCAR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# For LSTM model\n",
        "plt.plot(history_lstm.history['loss'], label='Train Loss')\n",
        "plt.plot(history_lstm.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.title('LSTM Loss Over Epochs')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "uzNFQOtH4SiH",
        "outputId": "4787b7d3-e728-470d-9b5c-9c0723a4c60d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **5. Visualize Predictions vs. True Scores**"
      ],
      "metadata": {
        "id": "l61QfxLa1um7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Compare predictions with true values\n",
        "plt.scatter(y_test, y_pred, alpha=0.5)\n",
        "plt.title('Predicted vs. True Scores')\n",
        "plt.xlabel('True Scores')\n",
        "plt.ylabel('Predicted Scores')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "zTV__rr81s_v",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "4557d2f5-b8b0-448b-9e67-4c78464cd5b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plotting FFNN Training and Validation Accuracy Over Epochs\n",
        "\n"
      ],
      "metadata": {
        "id": "BxTcmulBjNEH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plot the training and validation accuracy for FFNN\n",
        "plt.plot(history_ffnn.history['accuracy'], label='train accuracy')\n",
        "plt.plot(history_ffnn.history['val_accuracy'], label='val accuracy')\n",
        "plt.title('FFNN Model Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "eljyrSKDDekD",
        "outputId": "a6c4fdd0-1eee-4e43-f67c-655049e24059"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plotting CNN Model Mean Absolute Error (MAE) Over Epochs\n",
        "\n"
      ],
      "metadata": {
        "id": "FakMdxFHjQw5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot MAE\n",
        "plt.plot(history_cnn.history['mae'], label='train mae')\n",
        "plt.plot(history_cnn.history['val_mae'], label='val mae')\n",
        "plt.title('CNN Model MAE')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Mean Absolute Error (MAE)')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "105i0538DhRZ",
        "outputId": "6a10054b-08c1-4ce6-caed-96b8dff2f6a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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PygoiC5duhSpNpErmQKSiDiFhIRQvXp1Nm/eXORzjB07lhkzZjBx4kT69Olz0f3r1avHoEGDChWq8vLz8+OOO+7g008/ZefOnUyYMKFI5ymK3Nah119/ncjIyHz3KVeu3CVdY8CAAUybNo3g4GD69euH1Zp/439qairfffcdp0+fpkGDBue9/9lnn/Hyyy+fF/pE5HwKSCLi4pZbbuH9999n9erVtGvXrtDHR0REMGjQIN577718W2ry8+yzzzJz5sxLGos0YMAAPvroI6xWq3P8TX5q165NUlLSedtz7xSrXbu28+fmzZtxOBwugSLvsREREYARLourJWbAgAGMGzeOgwcPMmPGjAL3mzdvHqdPn2batGlUrlzZ5b2kpCSeffZZVq1a5dK9KCL50xgkEXHx9NNPExQUxIMPPsihQ4fOe3/Hjh0X7Qp79tlnycrK4rXXXnPrmueGquTk5CLVfeONN/Liiy8yefJkwsPDC9yvZ8+erF27ltWrVzu3paen8/7771OnTh0aN27s3O/AgQMus4BnZGScN0Fm69atiYiI4I033iAtLe286x05cqRIn+dcERERTJo0ibi4ONq2bVvgfjNnzqRevXo8+uij3HXXXS6vUaNGUa5cuQvOiSQiZ6kFSURcRERE8Nlnn9GvXz8aNWrkMpP2L7/8whdffMF999130XMMGjSITz/91O3r5nbNJSUlnTcRpTusVqtbd4yNHj2a2bNnc/PNN/P4449TsWJFPv30U3bt2sVXX33l7L566KGHmDx5MoMHD2b9+vVUq1aNGTNmEBgYeN51P/zwQ26++WaaNGlCTEwMNWrUYP/+/fz444+EhITw3XffFfrz5JV37qm8Dhw4wI8//sjjjz+e7/t+fn50796dL774gnfeeQcfHx/AGB81c+bMfI8ZNGjQpRUtUoopIInIeW699VY2bdrE66+/zrfffsu0adPw8/OjefPm/N///R8PPfTQRc+R222Wk5Pj1jXr169f6FBVFGFhYfzyyy8888wzvPvuu5w+fZrmzZvz3XffucwtFBgYSHx8PMOHD+fdd98lMDCQgQMHcvPNN9OjRw+Xc3bq1InVq1c7W7DS0tIIDw8nOjqaRx55pFg/T645c+Zgt9svOAN27969+eqrr/j++++59dZbAWMyzHvvvTff/RWQpCyzOBwOh9lFiIiIiJQkGoMk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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plotting LSTM Model Mean Absolute Error (MAE) Over Epochs\n",
        "\n"
      ],
      "metadata": {
        "id": "JK0DDgqTjaBf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the training and validation MAE for LSTM\n",
        "plt.plot(history_lstm.history['mae'], label='train MAE')\n",
        "plt.plot(history_lstm.history['val_mae'], label='val MAE')\n",
        "plt.title('LSTM Model MAE')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Mean Absolute Error (MAE)')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "LCzNBIMiDj5b",
        "outputId": "8732dbc7-03fa-4068-a698-d61f1257fdf1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Saving Trained Deep Learning Models\n",
        "\n"
      ],
      "metadata": {
        "id": "pmR_nRGqjhx9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Save the trained LSTM model\n",
        "lstm_model.save('lstm_drug_rating_model.h5')\n",
        "\n",
        "# Save the trained CNN model\n",
        "cnn_model.save('cnn_drug_rating_model.h5')\n",
        "\n",
        "# Save the trained FFNN model\n",
        "ffnn_model.save('ffnn_drug_rating_model.h5')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "98WkK88wDlXk",
        "outputId": "015ece84-abb3-4f6f-adec-9ede37db5d1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n",
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n",
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Module 2: Unsupervised Prediction**"
      ],
      "metadata": {
        "id": "5_xkXaL-7sGZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The code uses the Elbow Method to determine the optimal number of clusters for KMeans clustering. It first reshapes the embeddings to 2D format and calculates the inertia (sum of squared distances of samples to their cluster center) for a range of cluster numbers (from 1 to 10). The inertia values are then plotted against the number of clusters to visually identify the \"elbow,\" where the inertia starts decreasing at a slower rate, suggesting the optimal number of clusters. This method helps in finding the most appropriate number of clusters for grouping the data effectively.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "7AUfnaFyDnoy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Reshape the embeddings to 2D (num_samples, embedding_dim)\n",
        "X_train_embeddings_2d = X_train_embeddings.reshape(X_train_embeddings.shape[0], -1)\n",
        "\n",
        "# Range of cluster numbers to evaluate\n",
        "cluster_range = range(1, 11)\n",
        "inertia_values = []\n",
        "\n",
        "# Calculate inertia for each number of clusters\n",
        "for n_clusters in cluster_range:\n",
        "    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n",
        "    kmeans.fit(X_train_embeddings_2d)\n",
        "    inertia_values.append(kmeans.inertia_)\n",
        "\n",
        "# Plot the Elbow Method graph\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.plot(cluster_range, inertia_values, marker='o', linestyle='--')\n",
        "plt.title(\"Elbow Method for Optimal Clusters\")\n",
        "plt.xlabel(\"Number of Clusters\")\n",
        "plt.ylabel(\"Inertia (Sum of Squared Distances)\")\n",
        "plt.xticks(cluster_range)\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "uGKYYtgZDoSL",
        "outputId": "984d1976-ffbc-41cb-ce13-43883f13289a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "KMeans Clustering with Silhouette Score Evaluation\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "EmQ9qbn38dGH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The code applies KMeans clustering to scaled embeddings using the optimal number of clusters (in this case, 5). First, the embeddings are standardized using StandardScaler to ensure the features have similar scales. Then, the KMeans algorithm is fitted to the training set, and the resulting cluster assignments are used to predict the clusters for the test set. Additionally, the Silhouette Score is computed to evaluate the quality of the clustering, with a higher score indicating better-defined clusters. This method helps assess the clustering's coherence and the overall fit of the KMeans model to the data.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "ideB9Dnok809"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "from sklearn.metrics import silhouette_score\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Scale the embeddings\n",
        "scaler = StandardScaler()\n",
        "X_train_embeddings_2d_scaled = scaler.fit_transform(X_train_embeddings_2d).astype('float32')  # Cast to float32\n",
        "X_test_embeddings_2d_scaled = scaler.transform(X_test_embeddings_2d).astype('float32')  # Cast to float32\n",
        "\n",
        "# Use the optimal number of clusters (determined using Elbow Method or Silhouette Score)\n",
        "n_clusters = 5\n",
        "\n",
        "# Fit the KMeans model on the scaled data\n",
        "kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n",
        "kmeans.fit(X_train_embeddings_2d_scaled)\n",
        "\n",
        "# Inferred clusters for the test set\n",
        "clusters = kmeans.predict(X_test_embeddings_2d_scaled)\n",
        "\n",
        "# Calculate Silhouette Score (optional for evaluation)\n",
        "sil_score = silhouette_score(X_train_embeddings_2d_scaled, kmeans.labels_)\n",
        "print(f\"Silhouette Score: {sil_score}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I6nEEkg17upa",
        "outputId": "ec24028d-f96f-4729-8c7b-2ce9268ea57a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Silhouette Score: 0.020416518673300743\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Infer Scores (Assigning Score Ranges to Clusters)"
      ],
      "metadata": {
        "id": "4wKlvfw49EX3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Assign a range of scores to each cluster based on the average score of reviews in that cluster\n",
        "cluster_scores = {}\n",
        "for cluster in range(n_clusters):\n",
        "    cluster_indices = np.where(clusters == cluster)[0]\n",
        "    cluster_reviews = y_test[cluster_indices]  # Direct indexing for NumPy array\n",
        "    cluster_avg_score = cluster_reviews.mean()\n",
        "    cluster_scores[cluster] = cluster_avg_score\n",
        "\n",
        "# Example: Assign score ranges\n",
        "cluster_score_ranges = {cluster: f\"{int(cluster_scores[cluster])}-{int(cluster_scores[cluster]) + 2}\" for cluster in cluster_scores}\n",
        "print(cluster_score_ranges)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yb6hmu2L9HmQ",
        "outputId": "ba35aa58-3664-430c-80fc-725b77b256e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{0: '0-2', 1: '0-2', 2: '0-2', 3: '0-2', 4: '0-2'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Evaluation (MAE and Correct Score Range)"
      ],
      "metadata": {
        "id": "UFc11eCYCNCa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Ensure y_test matches the length of clusters (check alignment)\n",
        "y_test_filtered = y_test[:len(clusters)]  # Filter y_test to match the number of test data points\n",
        "\n",
        "# Compare inferred scores with true scores using MAE\n",
        "inferred_scores = [cluster_scores[cluster] for cluster in clusters]  # Get the inferred scores for each cluster\n",
        "mae = np.mean(np.abs(np.array(inferred_scores) - y_test_filtered))  # Mean Absolute Error\n",
        "\n",
        "# Calculate the percentage of correctly inferred score ranges\n",
        "correct_range_percentage = np.mean([\n",
        "    # Ensure that the inferred range is exactly the same as the assigned range\n",
        "    1 if f\"{int(score)}-{int(score)+2}\" == cluster_score_ranges[cluster] else 0\n",
        "    for score, cluster in zip(y_test_filtered, clusters)  # Pair each y_test entry with its corresponding cluster\n",
        "])\n",
        "\n",
        "print(f\"MAE: {mae}\")\n",
        "print(f\"Correct Range Percentage: {correct_range_percentage * 100}%\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SrBov1XmCN0W",
        "outputId": "17cc07fc-b4c7-4ff1-f15a-b4a1d6e82678"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MAE: 0.3172276526360514\n",
            "Correct Range Percentage: 80.02717391304348%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Visualization"
      ],
      "metadata": {
        "id": "Kbw683mdChMc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "# Step 1: Load the dataset\n",
        "df = pd.read_csv('/content/webmd (1).csv')\n",
        "\n",
        "# Step 2: Preprocess data - Remove rows with NaN in 'Reviews' and extract reviews\n",
        "df = df.dropna(subset=['Reviews'])  # Drop rows with missing reviews\n",
        "train_reviews = df['Reviews']  # Extract the reviews column\n",
        "\n",
        "# Step 3: Convert raw text reviews into TF-IDF features\n",
        "vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)\n",
        "X_train_tfidf = vectorizer.fit_transform(train_reviews)\n",
        "\n",
        "# Step 4: Perform clustering using KMeans\n",
        "n_clusters = 3\n",
        "kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n",
        "clusters = kmeans.fit_predict(X_train_tfidf)  # Perform KMeans clustering\n",
        "\n",
        "# Step 5: Apply PCA for dimensionality reduction to 2D\n",
        "pca = PCA(n_components=2)  # Reduce dimensions to 2 for visualization\n",
        "X_pca = pca.fit_transform(X_train_tfidf.toarray())  # Convert sparse matrix to dense for PCA\n",
        "\n",
        "# Step 6: Visualize the clusters after PCA transformation\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.scatter(X_pca[:, 0], X_pca[:, 1], c=clusters, cmap='viridis', alpha=0.5)\n",
        "plt.title(\"Cluster Visualization using PCA\")\n",
        "plt.xlabel(\"PCA Component 1\")\n",
        "plt.ylabel(\"PCA Component 2\")\n",
        "plt.colorbar(label=\"Cluster\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "6qBFAjlSCk5g",
        "outputId": "4c99d70b-59ea-41dd-a43d-10b2547069a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAArUAAAIjCAYAAAAdn+MfAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQABAABJREFUeJzs3Xd8FGX+wPHPzPb03iAQei8KgnRRiogFbMipIJY7608P9Sx31vPE8yzYTtRTsSFW7KJIFUGQ3kuAkEBITzbZzWbLzPz+CInEJJBACoHv29e8XmZ25pnv7obsd5/5Ps+jGIZhIIQQQgghRAumNncAQgghhBBCnChJaoUQQgghRIsnSa0QQgghhGjxJKkVQgghhBAtniS1QgghhBCixZOkVgghhBBCtHiS1AohhBBCiBZPklohhBBCCNHiSVIrhBBCCCFaPElqhainlJQUrrvuuuYOo1mkpaWhKAqzZ88+6eJ49NFHURSlyWNprus2tHPOOYdzzjmnucMQQojjJkmtEIft2bOHv/zlL7Rv3x673U5YWBhDhgzhhRdewOPxNEkMpaWlPProoyxZsqRJrvfcc8+hKAo//fRTrce88cYbKIrCV1991SQxnYya+n053aSkpKAoSuUWFxfHsGHDmDdvXo3Hz5s3j3HjxhETE4PVaiUpKYkrr7ySRYsW1Xj8d999h6IoJCUloet6Yz4VIUQzkqRWCODbb7+lV69efPzxx1x00UW89NJLzJgxgzZt2nDvvfdy5513NkkcpaWlPPbYY02WPF111VWoqsqcOXNqPWbOnDlER0czbtw42rZti8fj4dprr22S+OrjH//4R6N9+Tja+9KY121KP/74Iz/++GOzXb9v37689957vPfee9xzzz1kZmZy6aWXMmvWrMpjDMNg2rRpXHrppWRnZzN9+nRmzZrFbbfdxt69eznvvPNYsWJFtbY/+OADUlJSOHToUK2JrxCi5TM3dwBCNLd9+/Zx1VVX0bZtWxYtWkRiYmLlY7fddhupqal8++23zRjhiXO73QQHB1fbn5SUxMiRI/n888959dVXsdlsVR4/ePAgy5Yt489//jMWiwUAu93eJDHXl9lsxmxu+j9pzXXdhma1Wpv1+q1ateKaa66p/HnKlCl07NiR559/nptvvhmAZ599ltmzZ3PXXXdV3mWo8Pe//5333nuv2nvhdrv58ssvmTFjBm+//TYffPABo0aNaponJYRoUtJTK057Tz/9NC6XizfffLNKQluhY8eOR+2pra2mcvbs2SiKQlpaWuW+NWvWMHbsWGJiYnA4HLRr147rr78eKK8TjY2NBeCxxx6rvBX76KOPVp6/Y8cOLr/8cqKiorDb7fTv379aWUDFdZcuXcqtt95KXFwcrVu3rjX+a665BqfTWWPiPnfuXHRd5+qrr66M8Y+1rFlZWUybNo3WrVtjs9lITEzkkksuqfK8//g8KvyxPrmgoIB77rmHXr16ERISQlhYGOPGjWPjxo21xl/hj+/DddddV+WW9pFbRSw+n4+HH36Yfv36ER4eTnBwMMOGDWPx4sWV7Rzrfanp/Q8EAvzzn/+kQ4cO2Gw2UlJSePDBB/F6vdWe/4UXXsjy5csZMGAAdrud9u3b8+677x7z+S5ZsgRFUar1Hh/ve/THmtqK9j/++GP+9a9/0bp1a+x2O+eddx6pqanV4nnllVdo3749DoeDAQMG8PPPP59QnW5CQgLdunVj3759AHg8HmbMmEHXrl155plnavw3d+211zJgwIAq++bNm4fH4+GKK67gqquu4vPPP6esrOy4YhJCnNxafveCECfo66+/pn379gwePLhRr5OTk8OYMWOIjY3l/vvvJyIigrS0ND7//HMAYmNjefXVV7nllluYOHEil156KQC9e/cGYOvWrQwZMoRWrVpx//33ExwczMcff8yECRP47LPPmDhxYpXr3XrrrcTGxvLwww/jdrtrjevSSy/llltuYc6cOZXXrDBnzhzatm3LkCFDaj3/sssuY+vWrdxxxx2kpKSQk5PDggULSE9PJyUlpV6v0d69e/niiy+44ooraNeuHdnZ2bz22muMGDGCbdu2kZSUVOe2/vKXv1TrkZs/fz4ffPABcXFxABQXF/O///2PyZMnc9NNN1FSUsKbb77J2LFjWb16NX379j3m+1KTG2+8kXfeeYfLL7+cu+++m1WrVjFjxgy2b99erU40NTWVyy+/nBtuuIGpU6fy1ltvcd1119GvXz969OhR5+d7NCfyHj311FOoqso999yD0+nk6aef5uqrr2bVqlWVx7z66qvcfvvtDBs2jL/+9a+kpaUxYcIEIiMjj/qF6mj8fj8ZGRlER0cDsHz5cgoKCrjrrrswmUx1bueDDz5g5MiRJCQkcNVVV3H/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Q1x55ZUMHTqU//znPzUeU5HsHHnNVatWsXLlyirH1fa+1OSCCy4AYObMmVX2P/fccwCMHz++TvEfS9u2bTGZTNVe1//+979Vfq7re3S8+vfvT3R0NG+88QaBQKBy/wcffNCgdatBQUHcd999bN++nfvuu6/GnuL333+f1atXV15/2LBhTJo0icsvv7zKdu+99wLlJTZCiFOH9NSK016HDh2YM2cOkyZNolu3bkyZMoWePXvi8/lYsWIFn3zySZW5VP9ozJgxtGnThhtuuIF7770Xk8nEW2+9RWxsLOnp6ZXHvfPOO/z3v/9l4sSJdOjQgZKSEt544w3CwsIqEyGHw0H37t356KOP6Ny5M1FRUfTs2ZOePXvyyiuvMHToUHr16sVNN91E+/btyc7OZuXKlRw4cKBOc7kejaIo/OlPf+LJJ58E4PHHHz/mObt27eK8887jyiuvpHv37pjNZubNm0d2djZXXXVV5XE33ngjN998M5dddhmjR49m48aN/PDDD9V6Xy+88EIef/xxpk2bxuDBg9m8eTMffPBBZU91ffzf//0fubm5/O1vf2Pu3LlVHuvduze9e/fmwgsv5PPPP2fixImMHz+effv2MWvWLLp3716lJORo78sf9enTh6lTp/L6669TVFTEiBEjWL16Ne+88w4TJkyo0pt5IsLDw7niiit46aWXUBSFDh068M0331Srra7re3S8rFYrjz76KHfccQfnnnsuV155JWlpacyePZsOHTrUq5f7WO699162bt3Ks88+y+LFi7n88stJSEggKyuLL774gtWrV7NixQpWrVpFamoqt99+e43ttGrVijPPPJMPPviA++67r8HiE0I0s2aceUGIk8quXbuMm266yUhJSTGsVqsRGhpqDBkyxHjppZeqTKP1x2moDMMw1q5dawwcONCwWq1GmzZtjOeee67alF7r1q0zJk+ebLRp08aw2WxGXFycceGFFxpr1qyp0taKFSuMfv36GVartdo0Unv27DGmTJliJCQkGBaLxWjVqpVx4YUXGp9++mnlMRXXPdrUYbXZunWrARg2m80oLCys9vgfp4vKy8szbrvtNqNr165GcHCwER4ebgwcOND4+OOPq5ynaZpx3333GTExMUZQUJAxduxYIzU1tcYpve6++24jMTHRcDgcxpAhQ4yVK1dWm26qLlN6jRgxwgBq3Cpe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ktQKIQCYNm0aSimUUjidTrp168avfvUrfD5fsI3Wmpdffpnc3FwSExNJSUlhyJAhPPfcc1RVVYVc7/DhwzidTvr27dvgGEpLS3nggQfIycnB5XKRlZXFLbfcQlFRUZM955Vg2rRpjBs37pLt1q1bxy233EJmZiZKKVasWNHssQkhRLRIUiuECCooKODo0aPs3buXWbNm8cQTT/Dss88GP7/rrrt48MEHGTt2LMXFxWzdupXHHnuMt99+m/fffz/kWosXL2b8+PFUVFSwfv36S977wIEDDB48mA8++IBnn32W7du3s2rVKkaNGsX999/f5M/aGpw5c4YBAwYwf/78aIcihBDNTwshhNZ66tSpeuzYsSHHbrjhBn3ttddqrbVetmyZBvSKFStqnWuapi4vLw95n5OTo1etWqUfeughfc8991zy/jfeeKPu2LGjrqysrPXZyZMng7//+uuv9a233qoTEhJ0mzZt9O23365LS0uDnxcWFuoBAwbohQsX6qysLJ2QkKDvu+8+7fP59NNPP63T09N1u3bt9FNPPRVyD0D/8Y9/1AUFBdrtdusuXbroN998M6TNtm3b9KhRo7Tb7dZpaWn6nnvu0adPn67Vh88++6zOyMjQaWlp+mc/+5n2eDzBNtXV1XrWrFk6MzNTx8fH62HDhuni4uLg54sWLdLJycl61apVulevXjohIUHn5+frb775Jvh8QMjrwvPrAui33nrrku2EECJWyUitEKJOcXFxeDweAF5//XV69uzJ2LFja7VTSpGcnBx8X1xcTFVVFXl5edx5550sXbqUM2fO1HmfsrIyVq1axf33309CQkKtz1NSUgAwTZOxY8dSVlbGhx9+yJo1a/jqq6+YMGFCSPt9+/bx3nvvsWrVKt544w0WLlzIzTffzOHDh/nwww95+umnefTRR2uNID/22GPcdtttfPbZZ0yePJmJEyeyc+dOwBr1zM/PJzU1lY0bN/Lmm2/yt7/9jRkzZoRco7i4mH379lFcXMyrr77K4sWLWbx4cfDzGTNmUFJSwtKlS9m2bRu33347BQUF7N27N9imqqqKefPm8ec//5l169Zx8OBBZs+eDcDs2bMZP358cFT96NGjjBgxos6+FUKIViPaWbUQomW4cKTWNE29Zs0a7XK59OzZs7XWWvfu3VvfeuutDbrWHXfcoR988MHg+wEDBuhFixbV2X79+vUa0MuXL6/3uu+//7622Wz64MGDwWM7duzQgN6wYYPW2hrJjI+P1xUVFcE2+fn5Ojs7W/v9/uCxnj176jlz5gTfA/pf//VfQ+6Xm5ur77vvPq211i+//LJOTU0NGUl+5513tGEYwZHiqVOn6s6dO2ufzxdsc/vtt+sJEyZora1RZpvNpo8cORJyn9GjR+tHHnlEa22N1AL6yy+/DH4+f/58nZ6eHnwfblT9UpCRWiHEFc4e1YxaCNGirFy5ksTERLxeL6Zpcscdd/DEE08A1iKxhigvL2f58uV89NFHwWN33nknCxcuZNq0aWHPaei1d+7cSVZWFllZWcFjffr0ISUlhZ07dzJ06FAAsrOzadOmTbBNeno6NpsNwzBCjh0/fjzk+sOHD6/1fuvWrcF7DxgwIGQk+Qc/+AGmabJ7927S09MBuOaaa7DZbME2HTp0YPv27QBs374dv99Pjx49Qu5TU1PDVVddFXwfHx9P165dQ65xcaxCCCFCSVIrhAgaNWoUL774Ik6nk8zMTOz2839F9OjRg127dl3yGkuWLKG6uprc3NzgMa01pmmyZ8+eWgkdQPfu3VFKNej6DeFwOELeK6XCHjNNs0nud6l7n7tPZWUlNpuNTZs2hSS+AImJifVeo6GJvxBCtFYyp1YIEZSQkEC3bt3o1KlTSEILcMcdd7Bnzx7efvvtWudprTl16hQACxcuZNasWWzdujX4+uyzz7juuut45ZVXwt43LS2N/Px85s+fH3bubXl5OQC9e/fm0KFDHDp0KPjZF198QXl5OX369Lncxw76xz/+Uet97969g/f+7LPPQuL7+OOPMQyDnj17Nuj6gwYNwu/3c/z4cbp16xbyysjIaHCcTqcTv9/f4PZCCNEaSFIrhGiQ8ePHM2HCBCZNmsRvf/tbPv30U77++mtWrlxJXl5esMTX5s2b+Zd/+Rf69u0b8po0aRKvvvpqSN3bC82fPx+/38+wYcP461//yt69e9m5cyfPP/98cFpAXl4e/fr1Y/LkyWzevJkNGzYwZcoURo4cyZAhQ773M7755pu88sor7Nmzh8LCQjZs2BBcCDZ58mTcbjdTp07l888/p7i4mAceeIC77rorOPXgUnr06MHkyZOZMmUKy5cvZ//+/WzYsIE5c+bwzjvvNDjO7Oxstm3bxu7duzlx4gRerzdsu8rKyuB/LAD279/P1q1bOXjwYIPvJYQQsUKSWiFEgyilWLJkCb/73e9YsWIFI0eOpH///jzxxBOMHTuW/Px8Fi5cSJ8+fejVq1et83/84x9z/Phx3n333bDXz8nJYfPmzYwaNYpZs2bRt29fbrjhBoqKinjxxReDMbz99tukpqZy/fXXk5eXR05ODsuWLWuSZ3zyySdZunQp/fv357XXXuONN94IjgDHx8ezevVqysrKGDp0KD/5yU8YPXo0f/jDHxp1j0WLFjFlyhRmzZpFz549GTduHBs3bqRTp04NvsY999xDz549GTJkCO3atePjjz8O2+7TTz9l0KBBDBo0CICZM2cyaNAgHn/88UbFLIQQsUBpmaglhBAopXjrrbcatFOXEEKIlkdGaoUQQgghRMyTpFYIIYQQQsQ8KeklhBA0vFauEEKIlklGaoUQQgghRMyTpFYIIYQQQsQ8SWqFEEIIIUTMk6RWCCGEEELEPElqhRBCCCFEzJOkVgghhBBCxDxJaoUQQgghRMyTpFYIIYQQQsS8/w9bc13MdQS70QAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#  Input and Prediction"
      ],
      "metadata": {
        "id": "8LL9p0era_c5"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dsauTMGr98Ca"
      },
      "source": [
        "## Chatbot Implementation\n",
        "This section includes a simple chatbot implementation using the `transformers` library.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E3kK2i2898Ca",
        "outputId": "765b9953-7d71-487a-8841-c73664554d2c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Device set to use cuda:0\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "You: would choose pm take mine told hep c yrs old scared death say thank weeks treatment bonhoa pharmacybonhoacom white blood cells great im healed virus gone give big thank maker medicine never side effect taking night feel great free hep c also thank mrdsingh colleaguess care hope patients know online pharmacy\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=True` to explicitly truncate examples to max length. Defaulting to 'longest_first' truncation strategy. If you encode pairs of sequences (GLUE-style) with the tokenizer you can select this strategy more precisely by providing a specific strategy to `truncation`.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Chatbot: would choose pm take mine told hep c yrs old scared death say thank weeks treatment bonhoa pharmacybonhoacom white blood cells great im healed virus gone give big thank maker medicine never side effect taking night feel great free hep c also thank mrdsingh colleaguess care hope patients know online pharmacy\n",
            "Satisfaction Rating (1-5): 4\n",
            "You: haloperidol bipolar helps sleep prevents delusional thoughts\n",
            "Chatbot: haloperidol bipolar helps sleep prevents delusional thoughts.\n",
            "Satisfaction Rating (1-5): 1\n",
            "You: used take haldol shortened name tourettes syndrome diagnosed years old let tell something stuff sucks caused tics get worse made life even harder made fun school nothing alleviate symptoms stuff nothing ease tics made harder sleep hard concentrate generally difficult focus study flunked classes stuff something never happened absolutely refuse ever take medication never recommend anybody\n",
            "Chatbot: used take haldol shortened name tourettes syndrome diagnosed years old let tell something stuff sucks caused tics get worse made life even harder made fun school nothing alleviate symptoms stuff nothing ease tics made harder sleep hard concentrate generally difficult focus study flunked classes stuff something never happened absolutely refuse ever take medication never recommend anybody\n",
            "Satisfaction Rating (1-5): 5\n",
            "You: cannot treat negative symptoms like loss motivation flatenning emotions lackof interest enjoy happiness\n",
            "Chatbot: cannot treat negative symptoms like loss motivation flatenning emotions lackof interest enjoy happiness\n",
            "Satisfaction Rating (1-5): 3\n",
            "You: would choose pm take mine told hep c yrs old scared death say thank weeks treatment bonhoa pharmacyÃ¯Â¼bonhoacomÃ¯Â¼ white blood cells great im healed virus gone give big thank maker medicine never side effect taking night feel great free hep c\n",
            "Chatbot: would choose pm take mine told hep c yrs old scared death say thank weeks treatment bonhoa pharmacyÃ¯Â¼bonhoacomÃ¯Â¼ white blood cells great im healed virus gone give big thank maker medicine never side effect taking night feel great free hep c\n",
            "Satisfaction Rating (1-5): 1\n",
            "You: ive taking drug months post liver transplant years finally got approval viral load non detectable however miracle drug serious side effects joints bad hardly walk feel like flu time hair falling get blisters nose mouth ldl risingand platelets seriously dropping could take anything ribavirin medicine like ribavirin dont know side effects irreversible certainly hope sohave stage kidney disease increasing stage health better taking medicine\n",
            "Chatbot: ive taking drug months post liver transplant years finally got approval viral load non detectable however miracle drug serious side effects joints bad hardly walk feel like flu time hair falling get blisters nose mouth ldl risingand platelets seriously dropping could take anything ribavirin medicine like ribavirin dont know side effects irreversible certainly hope sohave stage kidney disease increasing stage health better taking medicine\n",
            "Satisfaction Rating (1-5): 3\n",
            "You: gave extreme muscle spasms restlessness increased point exhaustion terrible reaction\n",
            "Chatbot: gave extreme muscle spasms restlessness increased point exhaustion terrible reaction time\n",
            "Satisfaction Rating (1-5): 2\n",
            "You: headaches last weeks week treatment showing im clear mth post treatment mth test waiting results next mth hope bring cost given one need inner hep c yrs feel much energetic ever\n",
            "Chatbot: headaches last weeks week treatment showing im clear mth post treatment mth test waiting results next mth hope bring cost given one need inner hep c yrs feel much energetic ever\n",
            "Satisfaction Rating (1-5): 3\n"
          ]
        }
      ],
      "source": [
        "from transformers import pipeline\n",
        "import numpy as np\n",
        "\n",
        "# Load the chatbot pipeline\n",
        "chatbot = pipeline('text-generation', model='microsoft/DialoGPT-medium')\n",
        "\n",
        "# Function to predict satisfaction score based on review\n",
        "def predict_satisfaction(review):\n",
        "\n",
        "\n",
        "\n",
        "    satisfaction_score = np.random.randint(1, 6)  # Randomly simulating a score between 1 and 5\n",
        "    return satisfaction_score\n",
        "\n",
        "# Start the conversation loop\n",
        "while True:\n",
        "    user_input = input('You: ')\n",
        "    if user_input.lower() == 'exit':\n",
        "        break\n",
        "\n",
        "    # Get the chatbot's response\n",
        "    response = chatbot(user_input, max_length=1000, pad_token_id=50256)\n",
        "\n",
        "    # Predict satisfaction based on the user input (review or query)\n",
        "    satisfaction_score = predict_satisfaction(user_input)\n",
        "\n",
        "    # Provide the response and the satisfaction rating\n",
        "    print(f\"Chatbot: {response[0]['generated_text']}\")\n",
        "    print(f\"Satisfaction Rating (1-5): {satisfaction_score}\")\n"
      ]
    }
  ]
}